/*	@(#)std.cls	1.4	94/04/06 15:50:55 */
/*
 * Copyright 1994 Vrije Universiteit and Stichting Mathematisch Centrum,
 * The Netherlands.
 * For full copyright and restrictions on use see the file COPYRIGHT in
 * the top level of the Amoeba distribution.
 */

#ifndef _STD_CLS
#define _STD_CLS

/* Old Standard Objects interface */

/* The operations in this class provide servers generated by AIL with a
   way to support some standard operations from <stdcom.h>.
   In this way, old clients can start using the new servers right away.
   
   The intention is to use only the server main loop generated for this
   class; the client stubs must be thrown away, since the intention is
   to allow old clients to work, and these old clients will be linked
   with the old (hand-written) library stubs.
   
   The operations defined here use the same request and reply format as
   the hand-written library stubs, but the generated client stubs may
   differ.
   
   There are some restrictions and tricks; these are explained with the
   individual operations. */

/* *** ALL COMMENTS HERE ARE FOR SERVER WRITERS ONLY. ***
   CLIENTS WRITERS SHOULD READ THE MAN PAGES TO THE OLD LIBRARY STUBS. */

#include "ailamoeba.h"
#include "cmdreg.h"
#include "stdcom.h"

class stdinfo [STD_INFO .. STD_INFO] {

	const MAX_STD_INFO_LEN = 256;
	std_info(*,
		out char str[len:MAX_STD_INFO_LEN],
		in:h_size int n,
		out:h_size int len);
	/* Return a descriptive string for the object. */
};

/* Some servers may redefine this to be larger for their status buffer */

#ifndef STD_STATUS_LEN
#define STD_STATUS_LEN	5000
#endif

class stdstatus [STD_STATUS .. STD_STATUS] {

	const MAX_STD_STATUS_LEN = STD_STATUS_LEN;
	std_status(*,
		out char str[len:MAX_STD_STATUS_LEN],
		in:h_size int n,
		out:h_size int len);
	/* Return printable status report for a server. */
};

class stdrestrict [STD_RESTRICT .. STD_RESTRICT] {

	std_restrict(*, long mask, out capability newcap);
	/* Return a restricted capability:
	   only the rights in 'mask' are retained.
	   To be compatible with the old stub, the server should
	   return the capability both in the header (h_priv) and through
	   the capability output parameter.
	*/
};

class stdtouch [STD_TOUCH..STD_TOUCH] {

	std_touch(*);
	/* Touch the object.  Corresponds exactly to
		std_touch(cap);
	*/
};

class stdage [STD_AGE..STD_AGE] {

	std_age(*);
	/* Tells server to age all its objects.  Corresponds exactly to
		std_age(cap);
	*/
};

class stddestroy [STD_DESTROY..STD_DESTROY] {

	std_destroy(*);
	/* Destroy the object.  Corresponds exactly to
		std_destroy(cap);
	*/
};

class stdparams [STD_GETPARAMS .. STD_SETPARAMS] {

	const MAX_PARAM_LEN = 3000;

	std_getparams(*,
			out char parambuf[paramlen: MAX_PARAM_LEN],
			in  int  n, /* size of buffer provided */
			out int  paramlen,
			out int  nparams
	);
	/* Gets runtime parameters of a server.
	 *
	 * Buffer format:
	 * for each parameter:
	 *	name\0
	 *	type\0
	 *	description\0
	 *	current value\0
	 */

	std_setparams(*,
			in char  parambuf[paramlen: MAX_PARAM_LEN],
			in int   paramlen,
			in int   nparams
	);
	/* Sets runtime parameters of a server.
	 *
	 * Buffer format:
	 * for each parameter:
	 *	name\0
	 *	new value\0
	 */
	
};


class stdserver {
	inherit stdinfo, stdrestrict, stdstatus;
};

class stdobject {
	inherit stdinfo, stdrestrict, stdtouch, stddestroy;
};

class std {
	inherit stdserver, stdobject;
};

#endif /* _STD_CLS */
