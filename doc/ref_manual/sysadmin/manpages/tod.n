.\"	@(#)tod.n	1.5	96/02/15 17:54:40
.\"
.\" Copyright 1996 Vrije Universiteit, The Netherlands.
.\" For full copyright and restrictions on use see the file COPYRIGHT in the
.\" top level of the Amoeba distribution.
.\"
.aU
	Software: Hans van Staveren
	Document: Gregory J. Sharp, July 1990
	Modified: Gregory J. Sharp, Jan 1996 - table headers
.aE
.mT "tod" A
the Time Of Day server
.SH
Synopsis
.LP
Currently built into the kernel
.SH
Description
.LP
.kW "time of day server"
The time of day server provides an interface to the hardware time of day
clock, if it is available.
This server will normally only need to appear in one or two kernels on
a local-area network.
Besides the standard server commands it only provides two other commands:
one to set the time and one to read the time.
The server should be used to store GMT (Greenwich Mean Time).
Commands such as
.I date (U)
use the timezone database to calculate the local time correctly.
The timezone information is kept in the directory
.I /super/module/time/zoneinfo
and is maintained using
.I zic (A).
.SH
Programming Interface Summary
.LP
The programming interface consists of commands particular to the server
(whose names begin with
.I tod_ )
and the standard server commands (whose names begin with
.I std_ ).
A summary of the supported commands is presented in the following two tables.
For a complete description of the interface routines see
.I tod (L)
and
.I std (L).
Not all the standard commands are supported since they are not all pertinent.
.I Std_copy
and
.I std_destroy
are not implemented.
.I std_age
and
.I std_touch
are implemented but simply return
.cW STD_OK
and do nothing further.
.TS
box tab(:) center box;
cb s s s
lw(2.2c) | lw(2.6c) | lw(2.8c) | lw(6c)
lw(2.2c) | lw(2.6c) | lw(2.8c) | lw(6c)
lw(2.2c) | lp-2w(2.6c) | lp-2w(2.8c) | lw(6c) .
Standard Functions
_
Function:Required:Error:Summary
Name:Rights:Conditions:
=
std_age:NONE:T{
RPC error
T}:T{
Does Nothing
T}
_
std_info:NONE:T{
RPC error
T}:T{
Returns the string ``TOD Server''
T}
_
std_restrict:NONE:T{
RPC error
.br
STD_CAPBAD
T}:T{
Returns a server capability with restricted rights
T}
_
std_touch:NONE:T{
RPC error
T}:T{
Does Nothing
T}
_
.TE
.TS
box tab(:) center box;
cb s s s
lw(2.2c) | lw(2.6c) | lw(2.8c) | lw(6c)
lw(2.2c) | lw(2.6c) | lw(2.8c) | lw(6c)
lw(2.2c) | lp-2w(2.6c) | lp-2w(2.8c) | lw(6c) .
TOD Functions
_
Function:Required:Error:Summary
Name:Rights:Conditions:
=
tod_gettime:NONE:T{
RPC error
T}:T{
Returns the current time of day plus timezone information
T}
_
tod_settime:RGT_ALL:T{
RPC error
.br
STD_CAPBAD
.br
STD_DENIED
T}:T{
Modify the server's idea of the time
T}
_
.TE
.SH
Administration
.LP
There are three things which currently affect the server directly.
.IP i)
Setting the time which is done using
.I date (U).
To do this you need a capability with full rights.
.IP ii)
Installing the correct timezone database.
.IP iii)
Installing the capability of one of the time of day servers as
the default time of day server.
This is necessary since the entire system needs a place where it can reliably
find out a value for the time.
The place for installing the default server capability is described in
.I ampolicy.h
by the variable
.cW DEF_TODSVR
and is typically
.I /profile/cap/todsvr/default .
However the place to install it is via the path
.I /super/cap/todsvr/default
which is the public directory.
(The
.I /profile
directory may vary from user to user but typically points to the public
version.)
It is normal practice to allow the boot server (see
.I boot (A))
to maintain the default capability.
.SH
See Also
.LP
boot(A),
date(U),
std(L),
std_info(U),
std_restrict(U).
tod(L),
zdump(A),
zic(A).
