.\"	@(#)elvis.n	1.5	96/02/15 17:58:09
.aU
	Software: Mostly by Steve Kirkendall
	Document: Steve Kirkendall
			16820 SW Tallac Way
			Beaverton, OR 97007
			EMail: kirkenda@cs.pdx.edu
			Phone:  (503) 642-9905
	Modified: Gregory J. Sharp, 30 November 1990
			- Adapted for Amoeba manual.
.aE
.bp
.DS
.nH 1 "Elvis Reference Manual"
.LP
.sp
.kW "\fIelvis\fP"
.kW editor
.kW "text editor"
By Steve Kirkendall (E-Mail: kirkenda@cs.pdx.edu)
.sp
1.  INTRODUCTION
 1.1  Compiling
 1.2  Overview of Elvis

2.  VISUAL MODE COMMANDS
 2.1  Input Mode
 2.2  Arrow keys in Input Mode
 2.3  Digraphs
 2.4  Abbreviations
 2.5  Auto-Indent

3.  COLON MODE COMMANDS
 3.1  Line Specifiers
 3.2  Text Entry Commands
 3.3  Cut & Paste Commands
 3.4  Display Text Commands
 3.5  Global Operations Commands
 3.6  Line Editing Commands
 3.7  Undo Command
 3.8  Configuration & Status Commands
 3.9  Multiple File Commands
 3.10  Switching Files
 3.11  Working with a Compiler
 3.12  Exit Commands
 3.13  File I/O Commands
 3.14  Directory Commands
 3.15  Debugging Commands

4.  REGULAR EXPRESSIONS
 4.1  Syntax
 4.2  Options
 4.3  Substitutions
 4.4  Examples

5.  OPTIONS
 5.1  AutoIndent
 5.2  AutoPrint
 5.3  AutoWrite
 5.4  CC
 5.5  CharAttr
 5.6  COlumns
 5.7  DIGraph
 5.8  DIRectory
 5.9  EDcompatible
 5.10  ErrorBells
 5.11  ExRefresh
 5.12  FlipCase
 5.13  HideFormat
 5.14  IgnoreCase
 5.15  InputMode
 5.16  KeyTime
 5.17  KeywordPrg
 5.18  LiNes
 5.19  LIst
 5.20  MAgic
 5.21  MaKe
 5.22  ModeLine
 5.23  PAragraphs
 5.24  ReadOnly
 5.25  REport
 5.26  SCroll
 5.27  SEctions
 5.28  SHell
 5.29  ShiftWidth
 5.30  ShowMatch
 5.31  ShowMoDe
 5.32  SideScroll
 5.33  SYnc
 5.34  TabStop
 5.35  TErm
 5.36  VBell
 5.37  WArn
 5.38  WrapMargin
 5.39  WrapScan

6.  CUT BUFFERS
 6.1  Filling
 6.2  Pasting from a Cut Buffer
 6.3  Macros
 6.4  The Effect of Switching Files

7.  DIFFERENCES BETWEEN ELVIS & BSD VI/EX
 7.1  Extensions
 7.2  Omissions

8.  INTERNAL
 8.1  The temporary file
 8.2  Implementation of Editing
 8.3  Marks and the Cursor
 8.4  Colon Command Interpretation
 8.5  Screen Control
 8.6  Portability

9.  CFLAGS

10.  TERMCAP
 10.1  Required numeric fields
 10.2  Required string fields
 10.3  Boolean fields
 10.4  Optional string fields
 10.5  Optional strings received from the keyboard
 10.6  Optional fields that describe character attributes
 10.7  Optional fields that affect the cursor's shape
 10.8  An example

11.  ENVIRONMENT VARIABLES
 11.1  TERM, TERMCAP
 11.2  TMP, TEMP
 11.3  EXINIT
 11.4  SHELL, COMSPEC
 11.5  HOME

12.  VERSIONS
 12.1  BSD UNIX
 12.2  System-V UNIX
 12.3  SCO Xenix
 12.4  Minix
 12.5  Coherent
 12.6  MS-DOS
 12.7  Atari TOS
 12.8  OS9/6
.DE
.bp
.nH 2 "INTRODUCTION"
.LP
.I Elvis
is a clone of
.I vi/ex ,
the standard
.UX
editor.
.I Elvis
supports nearly all of the
.I vi/ex
commands,
in both
.I "visual mode"
and
.I "colon mode" .
.LP
Like
.kW "\fIvi\fP"
.kW "\fIex\fP"
.I vi/ex ,
.I elvis
stores most of the text in a temporary file,
instead of RAM.
This allows it to edit files that are too large to fit in a single process'
data space.
.LP
.I Elvis
runs under \*(Am, BSD
.UX ,
AT&T SysV
.UX ,
Minix, MS-DOS, Atari TOS, Coherent, and OS9/68000.
The next version is expected to add OS/2, VMS, AmigaDos, and MacOS.
Contact the author before you start porting it to some other OS,
because somebody else may have already done it.
.LP
.I Elvis
is freely redistributable, in either source form or executable form.
There are no restrictions on how you may use it.
.nH 3 "Compiling"
.LP
See the ``Versions'' section of this manual for instructions on
how to compile
.I elvis .
.LP
If you want to port
.I elvis
to another OS or compiler, then you
should read the ``Portability'' part of the ``Internal'' section.
.nH 3 "Overview of Elvis"
.LP
The user interface of
.I elvis/vi/ex
is weird.
There are two major command modes in
.I elvis ,
and a few text input modes as well.
Each command mode has a command which allows you to switch to the other mode.
.LP
You will probably use the
.I "visual mode"
most of the time.
This is the mode that
.I elvis
normally starts up in.
.LP
In visual command mode, the entire screen is filled with lines
of text from your file.
Each keystroke is interpreted as part of a visual command.
If you start typing text, it will
.B not
be inserted, it will be treated as part of a command.
To insert text, you must first give an ``insert text'' command.
This may take some getting used to.
(An alternative exists.
Lookup the ``inputmode'' option.)
.LP
The
.I "colon mode"
is quite different.
.I Elvis
displays a ``:'' character on the bottom line of the screen, as a prompt.
You are then expected to type in a command line and hit the <Return> key.
The set of commands recognized in the colon mode is different from
visual mode's.
.LP
The rest of this manual describes the commands available under each command
mode followed by a description of the many options available.
Thereafter comes a lot of information about the internal workings of
.I elvis
and other details which are mainly relevant to those compiling and installing
.I elvis .
.nH 2 "VISUAL MODE COMMANDS"
.LP
Most visual mode commands are one keystroke long.
The following
table lists the operation performed by each keystroke, and also
denotes any options or arguments that it accepts.
Notes at the end
of the table describe the notation used in this table.
.LP
In addition to the keys listed here, your keyboard's ``arrow''
keys will be interpreted as the appropriate cursor movement
commands.
The same goes for <PgUp> and <PgDn>, if your keyboard
has them.
There is a colon mode command (to be described later)
which will allow you to define other keys, such as function keys.
.LP
A tip: visual command mode looks a lot like text input mode.
If
you forget which mode you are in, just hit the <Esc> key.
If
.I elvis
beeps, then you are in visual command mode.
If
.I elvis
does not beep,
then you were in input mode, but by hitting <Esc> you will have
switched to visual command mode.
So, one way or another, after
<Esc>
.I elvis
will be ready for a command.
.LP
.TS
center;
lfB s s lfB lfB
c c c l l .
command	description	type
_
	\&^A		\(em	
	\&^B		Move toward the top of the file by 1 screen full	
	\&^C		\(em	
count	\&^D		scroll down <count> lines (default 1/2 screen)	
count	\&^E		scroll up <count> lines	
	\&^F		move toward the bottom of the file by 1 screen full	
	\&^G		show file status, and the current line #	
count	\&^H		move left, like h	MOVE
	\&^I		\(em	
count	\&^J		move down	MOVE
	\&^K		\(em	
	\&^L		redraw the screen	
count	\&^M		move to the front of the next line	MOVE
count	\&^N		move down	MOVE
	\&^O		\(em	
count	\&^P		move up	MOVE
	\&^Q		\(em	
	\&^R		redraw the screen	
	\&^S		\(em	
	\&^T		\(em	
count	\&^U		scroll up <count> lines (default 1/2 screen)	
	\&^V		\(em	
	\&^W		\(em	
	\&^X		\(em	
count	\&^Y		scroll down <count> lines	
	\&^Z		\(em	
	ESC		\(em	
	\&^\e		\(em	
	\&^]		if the cursor is on a tag name, go to that tag	
	\&^\&^		switch to the previous file, like ``:e #''	
	\&^\&_		\(em	
count	SPC		move right,like ``l''	MOVE
	!	mv	run the selected lines through an external filter program	
	"	key	select which cut buffer to use next	
count	#	+	increment a number	EDIT
	$		move to the rear of the current line	MOVE
	%		move to the matching (){}[] character	MOVE
count	&		repeat the previous ``:s//'' command here	EDIT
	'	key	move to a marked line	MOVE
count	(		move backward <count> sentences	MOVE
count	)		move forward <count> sentences	MOVE
	*		go to the next error in the errlist	
count	+		move to the front of the next line	MOVE
count	,		repeat the previous [fFtT] but in the other direction	MOVE
count	\-		move to the front of the preceding line	MOVE
count	.		repeat the previous ``edit'' command	
	/text		search forward for a given regular expression	MOVE
	0		if not part of count, move to first char of this line	MOVE
	1		part of count	
	2		part of count	
	3		part of count	
	4		part of count	
	5		part of count	
	6		part of count	
	7		part of count	
	8		part of count	
	9		part of count	
	:	text	run single \fIex\fP cmd	
count	;		repeat the previous [fFtT] cmd	MOVE
	<	mv	shift text left	EDIT
	\&=		\(em	
	>	mv	shift text right	EDIT
	?	text	search backward for a given regular expression	MOVE
	@	key	execute the contents of a cut-buffer as \fIvi\fP commands	
count	A	inp	append at end of the line	EDIT
count	B		move back Word	MOVE
	C	inp	change text from the cursor through the end of the line	EDIT
	D		delete text from the cursor through the end of the line	EDIT
count	E		move end of Word	MOVE
count	F	key	move leftward to a given character	MOVE
count	G		move to line #<count> (default is the bottom line)	MOVE
count	H		move to home row (the line at the top of the screen)	
count	I	inp	insert at the front of the line (after indents)	EDIT
count	J		join lines, to form one big line	EDIT
	K		look up keyword	
count	L		move to last row (the line at the bottom of the screen)	
	M		move to middle row	
	N		repeat previous search, but in the opposite direction	MOVE
count	O	inp	open up a new line above the current line	EDIT
	P		paste text before the cursor	
	Q		quit to \fIex\fP mode	
	R	inp	overtype	EDIT
count	S	inp	change lines, like <count>cc	
count	T	key	move leftward *almost* to a given character	MOVE
	U		Undo all recent changes to the current line	
	V		\(em	
count	W		move forward <count> Words	MOVE
count	X		delete the character(s) to the left of the cursor	EDIT
count	Y		yank text line(s) (copy them into a cut buffer)	
	ZZ		save the file & exit	
	[[		move back 1 section	MOVE
	\e		\(em	
	]]		move forward 1 section	MOVE
	\&^		move to the front of the current line (after indent)	MOVE
	\&_		\(em	
	`		key move to a marked character	MOVE
count	a	inp	insert text after the cursor	EDIT
count	b		move back <count> words	MOVE
	c	mv	change text	EDIT
	d	mv	delete text	EDIT
count	e		move forward to the end of the current word	MOVE
count	f	key	move rightward to a given character	MOVE
	g		\(em	
count	h		move left	MOVE
count	i	inp	insert text at the cursor	EDIT
count	j		move down	MOVE
count	k		move up	MOVE
count	l		move right	MOVE
	m	key	mark a line or character	
	n		repeat the previous search	MOVE
count	o	inp	open a new line below the current line	EDIT
	p		paste text after the cursor	
	q		\(em	
count	r	key	replace <count> chars by a given character	EDIT
count	s	inp	replace <count> chars with text from the user	EDIT
count	t	key	move rightward *almost* to a given character	MOVE
	u		undo the previous edit command	
	v		\(em	
count	w		move forward <count> words	MOVE
count	x		delete the character that the cursor's on	EDIT
	y	mv	yank text (copy it into a cut buffer)	
	z	key	scroll current line to the screen's +=top \-=bottom .=middle	
count	{		move back <count> paragraphs	MOVE
count	|		move to column <count> (the leftmost column is 1)	
count	}		move forward <count> paragraphs	MOVE
count	~		switch a character between uppercase & lowercase	EDIT
	DEL		\(em	
.TE
.IP count
.br
Many commands may be preceded by a count.
This is a sequence of digits
representing a decimal number.
For most commands that use a count,
the command is repeated <count> times.
The count is always optional,
and usually defaults to 1.
.IP key
.br
Some commands require two keystrokes.
The first key always determines
which command is to be executed.
The second key is used as a parameter
to the command.
.IP mv
.br
Six commands (! < > c d y) operate on text between the cursor and some
other position.
To specify that other position, you are expected to
follow the command keystroke with a movement command.
Also, you may
have the command operate on the whole line that the cursor is on by
typing the command key a second time.
.IP inp
.br
Many commands allow the user to interactively enter text.
.IP EDIT
.br
These commands affect text, and may be repeated by the ``.'' command.
.IP MOVE
.br
These commands move the cursor, and may be used to specify the extent
of a member of the ``mv'' class of commands.
.nH 3 "Input Mode"
.LP
You cannot type text into your file directly from visual command mode.
Instead, you must first give a command which will put you into input mode.
The commands to do this are A/C/I/O/R/S/a/i/o/s.
.LP
The S/s/C/c commands temporarily place a $ at the end of the
text that they are going to change.
.LP
In input mode, all keystrokes are inserted into the text at the
cursor's position, except for the following:
.LP
.TS
center, tab(:);
l l .
\&^A:insert a copy of the last input text
\&^D:delete one indent character
\&^H:(backspace) erase the character before the cursor
\&^L:redraw the screen
\&^M:(carriage return) insert a newline (^J, linefeed)
\&^P:insert the contents of the cut buffer
\&^R:redraw the screen, like ^L
\&^T:insert an indent character
\&^U:backspace to the beginning of the line
\&^V:insert the following keystroke, even if special
\&^W:backspace to the beginning of the current word
\&^Z^Z:write the file & exit \fIelvis\fP
\&^[:(ESCape) exit from input mode, back to command mode
.TE
.LP
Also, on some systems, ^S may stop output, ^Q may restart
output, and ^C may interrupt execution.
\&^@ (the NUL character) cannot be inserted.
.LP
The R visual command puts you in overtype mode, which is a
slightly different form of input mode.
In overtype mode, each time
you insert a character, one of the old characters is deleted from the file.
.nH 3 "Arrow keys in Input Mode"
.LP
The arrow keys can be used to move the cursor in input mode.
(This is an extension; the real
.I vi
does not support arrow keys in input mode.)
The <PgUp>, <PgDn>, <Home>, and <End> keys work in input mode, too.
The <Delete> key deletes a single character in input mode.
.LP
The best thing about allowing arrow keys to work in input mode is that as long
as you are in input mode,
.I elvis
seems to have a fairly ordinary user interface.
With most other text editors, you are always in either insert mode or replace
mode, and you can use the arrow keys at any time to move the cursor.
Now,
.I elvis
can act like that, too.
In fact, with the new ``inputmode'' option and the
``CTRL\-Z CTRL\-Z'' input command, you may never have to go into
visual command mode for simple edit sessions.
.nH 3 "Digraphs"
.LP
.I Elvis
supports digraphs as a way to enter non-ASCII characters.
A digraph is a character which is composed of two other characters.
For example, an apostrophe and the letter i could be
defined as a digraph which is to be stored and displayed as an accented i.
.LP
There is no single standard for extended ASCII character sets.
.I Elvis
can be compiled to fill the digraph with values appropriate for either
the IBM PC character set, or the LATIN\-1 character set used by X windows,
or neither.
(See the discussions of
.cW \-DCS_IBMPC
and
.cW \-DCS_LATIN1
in the CFLAGS section of this manual.)
You can view or edit the digraph table via the ``:digraph'' colon command.
.LP
Digraphs wil not be recognized until you have entered ``:set digraph''.
.LP
To actually use a digraph type the first character, then hit
<Backspace>, and then type the second character.
.I Elvis
will then substitute the non-ASCII character in their place.
.nH 3 "Abbreviations"
.LP
.I Elvis
can expand abbreviations for you.
You define an abbreviation with the
.cW :abbr
command, and then whenever you type in the abbreviated form while in input mode,
.I elvis
will immediately use the long form.
.LP
.I Elvis
does not perform the substitution until you type a
non-alphanumeric character to mark the end of the word.
If you
type a CTRL\-V before that non-alphanumeric character, then
.I elvis
will not perform the substitution.
.nH 3 "Auto-Indent"
.LP
With the ``:set autoindent'' option turned on,
.I elvis
will
automatically insert leading white space at the beginning of each
new line that you type in.
The leading white space is copied from
the preceding line.
.LP
To add more leading white space, type CTRL\-T.
To remove some
white space, type CTRL\-D.
.LP
.I Elvis '
autoindent mode is not 100% compatible with
.I vi 's.
In
.I elvis ,
0^D and ^^D do not work, ^U can wipe out all indentation, and
sometimes
.I elvis
will use a different amount of indentation than
.I vi
would.
.nH 2 "COLON MODE COMMANDS"
.LP
.TS
center, tab(:);
lfB lfB lfB
l l l .
lines:command:arguments
_
[line]:\fBa\fPppends:
:\fBar\fPgs:[files]
:\fBcc\fP:[files]
:\fBcd\fP:[directory]
[line][,line]:\fBc\fPhange:
:\fBchd\fPir:[directory]
[line][,line]:\fBco\fPpy:line
[line][,line]:\fBd\fPelete:["x]
:\fBdi\fPgraph[!]:[XX [Y]]
:\fBe\fPdit[!]:[file]
:\fBer\fPrlist[!]:[errlist]
:\fBe\fPx[!]:[file]
:\fBf\fPile:[file]
[line][,line]:\fBg\fPlobal:/regexp/ command
[line]:\fBi\fPnsert:
[line][,line]:\fBj\fPoin:
[line][,line]:\fBl\fPist:
:\fBmak\fPe:[target]
:\fBma\fPp[!]:key mapped_to
[line]:mar\fBk\fP:x
:\fBmk\fPexrc:
[line][,line]:\fBm\fPove:line
:\fBn\fPext[!]:[files]
:\fBN\fPext[!]
[line][,line]:\fBnu\fPmber:
:\fBpre\fPvious[!]:
[line][,line]:\fBp\fPrint:
[line]:\fBpu\fPt:["x]
:\fBq\fPuit[!]:
[line]:\fBr\fPead:file
:\fBrew\fPind[!]:
:\fBse\fPt:[options]
:\fBso\fPurce:file
[line][,line]:\fBs\fPubstitute:/regexp/replacement/[p][g][c]
:\fBta\fPg[!]:tagname
[line][,line]:\fBt\fPo:line
:\fBu\fPndo:
:\fBunm\fPap[!]:ey
:\fBve\fPrsion:
[line][,line]:\fBv\fPglobal:regexp/ command
:\fBvi\fPsual:
:\fBwq\fP:
[line][,line]:\fBw\fPrite[!]:[[>>]file]
:\fBx\fPit[!]:
[line][,line]:\fBy\fPank:["x]
[line][,line]:\fB!\fP:command
[line][,line]:\fB<\fP:
[line][,line]:\fB=\fP:
[line][,line]:\fB>\fP:
[line][,line]:\fB&\fP:
:\fB@\fP:"x
.TE
To use colon mode commands, you must switch from visual command
mode to colon command mode.
The visual mode commands to do this
are ``:'' for a single colon command, or ``Q'' for many colon mode
commands.
.nH 3 "Line Specifiers"
.LP
Line specifiers are always optional.
The first line specifier
of most commands usually defaults to the current line.
The second line specifier usually defaults to be the same as the first line
specifier.
Exceptions are :write, :global, and :vglobal, which act
on all lines of the file by default, and :!, which acts on no lines
by default.
.LP
Line specifiers consist of an absolute part and a relative
part.
The absolute part of a line specifier may be either an
explicit line number, a mark, a dot to denote the current line, a
dollar sign to denote the last line of the file, or a forward or
backward search.
.LP
An explicit line number is simply a decimal number, expressed as
a string of digits.
.LP
A mark is typed in as an apostrophe followed by a letter.
Marks must be set before they can be used.
You can set a mark in visual
command mode by typing ``m'' and a letter, or you can set it in colon
command mode via the ``mark'' command.
.LP
A forward search is typed in as a regular expression surrounded
by slash characters; searching begins at the default line.
A
backward search is typed in as a regular expression surrounded by
question marks; searching begins at the line before the default
line.
.LP
If you omit the absolute part, then the default line is used.
.LP
The relative part of a line specifier is typed as a ``+'' or ``\-''
character followed by a decimal number.
The number is added to or
subtracted from the absolute part of the line specifier to produce
the final line number.
.LP
As a special case, the % character may be used to specify all
lines of the file.
It is roughly equivalent to saying 1,$.
This can be a handy shortcut.
.LP
Some examples:
.LP
.TS
center;
l l .
:p	print the current line
:37p	print line 37
:'gp	print the line which contains mark g
:/foo/p	print the next line that contains ``foo''
:$p	print the last line of the file
:20,30p	print lines 20 through 30
:1,$p	print all lines of the file
:%p	print all lines of the file
:/foo/\-2,+4p	print 5 lines around the next ``foo''
.TE
.nH 3 "Text Entry Commands"
.LP
.sC
[line] append
[line][,line] change ["x]
[line] insert
.eC
The
.B a ppend
command inserts text after the specified line.
.LP
The
.B i nsert
command inserts text before the specified line.
.LP
The
.B c hange
command copies the range of lines into a cut buffer,
deletes them, and inserts new text where the old text used to be.
.LP
For all of these commands, you indicate the end of the text
you are inserting by hitting ^D or by entering a line which contains
only a period.
.nH 3 "Cut & Paste Commands"
.LP
.sC
[line][,line] delete ["x]
[line][,line] yank ["x]
[line] put ["x]
[line][,line] copy line
[line][,line] to line
[line][,line] move line
.eC
.LP
The
.B d elete
command copies the specified range of lines into a
cut buffer, and then deletes them.
.LP
The
.B y ank
command copies the specified range of lines into a cut
buffer, but does *not* delete them.
.LP
The
.B pu t
command inserts text from a cut buffer after the specified line.
.LP
The
.B co py
and
.B t o
commands yank the specified range of lines and
then immediately paste them after some other line.
.LP
The
.B m ove
command deletes the specified range of lines and then
immediately pastes them after some other line.
If the destination
line comes after the deleted text, then it will be adjusted
automatically to account for the deleted lines.
.nH 3 "Display Text Commands"
.LP
.sC
[line][,line] print
[line][,line] list
[line][,line] number
.eC
.LP
The
.B p rint
command displays the specified range of lines.
.LP
The
.B nu mber
command displays the lines, with line numbers.
.LP
The
.B l ist
command also displays them, but it is careful to make
control characters visible.
.nH 3 "Global Operations Commands"
.LP
.sC
[line][,line] global /regexp/ command
[line][,line] vglobal /regexp/ command
.eC
.LP
The
.B g lobal
command searches through the lines of the specified
range (or through the whole file if no range is specified) for
lines that contain a given regular expression.
It then moves the
cursor to each of these lines and runs some other command on them.
.LP
The
.B v global
command is similar, but it searches for lines that
.B "do not"
contain the regular expression.
.nH 3 "Line Editing Commands"
.LP
.sC
[line][,line] join
[line][,line] ! program
[line][,line] <
[line][,line] >
[line][,line] substitute /regexp/replacement/[p][g][c]
[line][,line] &
.eC
.LP
The
.B j oin
command catenates all lines in the specified range
together to form one big line.
If only a single line is specified,
then the following line is catenated onto it.
.LP
The
.B !
command runs an external filter program, and feeds the
specified range of lines to its
.I stdin .
The lines are then
replaced by the output of the filter.
A typical example would be
``:'a,'z!sort'' to sort the lines 'a,'z.
.LP
The
.B <
and
.B >
commands shift the specified range of lines left or
right, normally by the width of 1 tab character.
The ``shiftwidth'' option determines the shifting amount.
.LP
The
.B s ubstitute
command finds the regular expression in each
line, and replaces it with the replacement text.
The ``p'' option
causes the altered lines to be printed.
The ``g'' option permits all
instances of the regular expression to be found & replaced.
(Without ``g'', only the first occurrence in each line is replaced.)
The ``c'' option asks for confirmation before each substitution.
.LP
The
.B &
command repeats the previous substitution command.
Actually, ``&'' is equivalent to ``s//~/'' with the same options as
last time.
It searches for the last regular expression that you
specified for any purpose, and replaces it with the same text
that was used in the previous substitution.
.nH 3 "Undo Command"
.LP
.sC
undo
.eC
.LP
The
.B u ndo
command restores the file to the state it was in before
your most recent command which changed text.
.nH 3 "Configuration & Status Commands"
.LP
.sC
map[!] [key mapped_to]
unmap[!] key
abbr [word expanded_form_of_word]
unabbr word
digraph[!] [XX [Y]]
set [options]
mkexrc
[line] mark "x
visual
version
[line][,line] =
file [file]
source file
@ "x
.eC
.LP
The
.B ma p
command allows you to configure
.I elvis
to recognize your
function keys, and treat them as though they transmitted some other
sequence of characters.
Normally this mapping is done only when in
the visual command mode, but with the [!] present it will map keys
under all contexts.
When this command is given with no arguments,
it prints a table showing all mappings currently in effect.
When called with two arguments, the first is the sequence that your
function key really sends, and the second is the sequence that you
want
.I elvis
to treat it as having sent.
.LP
The
.B unm ap
command removes key definitions that were made via the map command.
.LP
The
.B ab br
command is used to define/list a table of abbreviations.
The table contains both the abbreviated form and the fully spelled-out form.
When you are in visual input mode, and
you type in the abbreviated form,
.I elvis
will replace the
abbreviated form with the fully spelled-out form.
When this command is called without arguments, it lists the table; with two
or more arguments, the first argument is taken as the abbreviated
form, and the rest of the command line is the fully spelled-out form.
.LP
The
.B una bbr
command deletes entries from the abbr table.
.LP
The
.B di graph
command allows you to display the set of digraphs
that
.I elvis
is using, or add/remove a digraph.
To list the set of digraphs, use the digraph command with no arguments.
To add a digraph, you should give the digraph command two arguments.
The first argument is the two ASCII characters that are to be combined;
the second is the non-ASCII character that they represent.
The non-ASCII character's most significant bit is automatically set by
the digraph command, unless you append a ``!'' to the command name.
.LP
Removal of a digraph is similar to adding a digraph, except that
you should leave off the second argument.
.LP
The
.B se t
command allows you examine or set various options.
With no arguments, it displays the values of options that have been changed.
With the single argument ``all'' it displays the values of
all options, regardless of whether they have been explicitly set or not.
Otherwise, the arguments are treated as options to be set.
.LP
The
.B mk exrc
command saves the current configuration to a file
called
.I .exrc
in the current directory.
.LP
The mar\fBk\fP command defines a named mark to refer to a specific
place in the file.
This mark may be used later to specify lines for other commands.
.LP
The
.B vi sual
command puts the editor into visual mode.
Instead of emulating
.I ex ,
.I elvis
will start emulating
.I vi .
.LP
The
.B ve rsion
command tells you that what version of
.I elvis
this is.
.LP
The
.B =
command tells you what line you specified, or, if you
specified a range of lines, it will tell you both endpoints and the
number of lines included in the range.
.LP
The
.B f ile
command tells you the name of the file, whether it has
been modified, the number of lines in the file, and the current
line number.
You can also use it to change the name of the current file.
.LP
The
.B so urce
command reads a sequence of colon mode commands from
a file, and interprets them.
.LP
The
.B @
command executes the contents of a cut-buffer as
.I ex
commands.
.nH 3 "Multiple File Commands"
.LP
.sC
args [files]
next[!] [files]
Next[!]
previous[!]
rewind[!]
.eC
.LP
When you invoke
.I elvis
from your shell's command line, any
file names that you give to
.I elvis
as arguments are stored in the
args list.
The
.B ar gs
command will display this list, or define a new one.
.LP
The
.B n ext
command switches from the current file to the next one in the args list.
You may specify a new args list here, too.
.LP
The
.B N ext
and
.B pre vious
commands (they are really aliases for the same command) switch from the
current file to the preceding file in the args list.
.LP
The
.B rew ind
command switches from the current file to the first file in the args list.
.nH 3 "Switching Files"
.LP
.sC
edit[!] [file]
tag[!] tagname
.eC
.LP
The
.B e dit
command allows to switch from the current file to some other file.
This has nothing to do with the args list, by the way.
.LP
The
.B ta g
command looks up a given tagname in a file called ``tags''.
This tells it which file the tag is in, and how to find it in that file.
.I Elvis
then switches to the tag's file and finds the tag.
.nH 3 "Working with a Compiler"
.LP
.sC
cc [files]
make [target]
errlist[!] [errlist]
.eC
.LP
The
.B cc
and
.B mak e
commands execute your compiler or
.I make
utility and redirect any error messages into a file called
.I errlist .
By default,
.I cc
is run on the current file.
(You should write it out before running
.I cc .)
The contents of the
.I errlist
file are then scanned for error messages.
If an error message is found, then the
cursor is moved to the line where the error was detected, and the
description of the error is displayed on the status line.
.LP
After you have fixed one error, the
.B er rlist
command will move the cursor to the next error.
In visual command mode, hitting ``*'' will do this, too.
.LP
You can also create an
.I errlist
file from outside
.I elvis
and
use
.sC
elvis -m
.eC
to start
.I elvis
and have the cursor moved to the first error.
Note that you do not need to supply a file name with
.sC
elvis -m
.eC
because the error messages always say which source file an error is in.
.LP
Note: When you use
.I errlist
repeatedly to fix several errors in a single file,
it will attempt to adjust the reported line numbers to
allow for lines that you have inserted or deleted.
These adjustments are made with the assumption that you will work though
the file from the beginning to the end.
.nH 3 "Exit Commands"
.LP
.sC
quit[!]
wq
xit
.eC
.LP
The
.B q uit
command exits from the editor without saving your file.
.LP
The
.B wq
command writes your file out, then exits.
.LP
The
.B x it
command is similar to the
.B wq
command, except that
.B x it
will not bother to write your file if you have not modified it.
.nH 3 "File I/O Commands"
.LP
.sC
[line] read file
[line][,line] write[!] [[>>]file]
.eC
.LP
The
.B r ead
command gets text from another file and inserts it after the specified line.
It can also read the output of a program; simply precede the
program name by a ``!'' and use it in place of the file name.
.LP
The
.B w rite
command writes the whole file, or just part of it, to some other file.
The ``!'', if present, will permit the lines to be
written even if you have set the readonly option.
If you precede the file name by >> then the lines will be appended to the file.
.nH 3 "Directory Commands"
.LP
.sC
cd [directory]
chdir [directory]
shell
.eC
.LP
The
.B cd
and
.B chd ir
commands (really two names for one command)
switch the current working directory.
.LP
The
.B sh ell
command starts an interactive shell.
.nH 3 "Debugging Commands"
.LP
.sC
[line][,line] debug[!]
validate[!]
.eC
.LP
These commands are only available if you compile
.I elvis
with the
.cW \-DDEBUG
flag.
.LP
The de\fBb\fPug command lists statistics for the blocks which contain
the specified range of lines.
If the ``!'' is present, then the contents of those blocks is displayed, too.
.LP
The
.B va lidate
command checks certain variables for internal consistency.
Normally it does not output anything unless it detects a problem.
With the ``!'', though, it will always produce
.I some
output.
.nH 2 "REGULAR EXPRESSIONS"
.LP
.I Elvis
uses regular expressions for searching and substitutions.
.nH 3 "Syntax"
.LP
.I Elvis '
.I regexp
package treats the following one or two character
strings (called meta-characters) in special ways:
.LP
.TS
center, tab(:);
l l .
\e\^( \e\^):Used to delimit subexpressions
\&^:Matches the beginning of a line
$:Matches the end of a line
\e\^<:Matches the beginning of a word
\e\^>:Matches the end of a word
\&[ ]:Matches any single character inside the brackets
\&*:The preceding may be repeated 0 or more times
\e\^+:The preceding may be repeated 1 or more times
\e\^?:The preceding is optional
.TE
Anything else is treated as a normal character which must match exactly.
The special strings may all be preceded by a backslash to
force them to be treated normally.
.nH 3 "Options"
.LP
.I Elvis
has two options which affect the way regular expressions are used.
These options may be examined or set via the :set command.
.LP
The first option is called
.I [no]magic .
This is a boolean option, and it is
.I magic
(TRUE) by default.
While in magic mode,
all of the meta-characters behave as described above.
In
.I nomagic
mode, only ^ and $ retain their special meaning.
.LP
The second option is called
.I [no]ignorecase .
This is a boolean option, and it is
.I noignorecase
(FALSE) by default.
While in
.I ignorecase
mode, the searching mechanism will not distinguish
between an uppercase letter and its lowercase form.
In
.I noignorecase
mode, uppercase and lowercase are treated as being different.
.LP
Also, the
.I [no]wrapscan
option affects searches.
.nH 3 "Substitutions"
.LP
The :s command has at least two arguments: a regular expression,
and a substitution string.
The text that matched the regular
expression is replaced by text which is derived from the
substitution string.
.LP
Most characters in the substitution string are copied into the
text literally but a few have special meaning:
.LP
.TS
center, tab(:);
l l .
\&&:Insert a copy of the original text
\&~:Insert a copy of the previous replacement text
\e\^1:T{
Insert a copy of that portion of the original text which
matched the first set of \e\^( \e\^) parentheses.
T}
\e\^2 \- \e\^9:Does the same for the second (etc.) pair of \e\^( \e\^).
\e\^U:Convert all chars of any later &, ~, or \e\^# to uppercase
\e\^L:Convert all chars of any later &, ~, or \e\^# to lowercase
\e\^E:End the effect of \e\^U or \e\^L
\e\^u:Convert the first char of the next &, ~ or \e\^# to uppercase
\e\^l:Convert the first char of the next &, ~ or \e\^# to lowercase
.TE
.LP
These may be preceded by a backslash to force them to be treated
normally.
If
.I nomagic
mode is in effect, then & and ~ will be treated normally,
and you must write them as \e\^& and \e\^~ for them to have special meaning.
.nH 3 "Examples"
.LP
This example changes every occurrence of ``utilize'' to ``use'':
.sC
:%s/utilize/use/g
.eC
The next example deletes all white space that occurs at the end of a
line anywhere in the file.
(The brackets contain a single space and a single tab.):
.sC
:%s/[ ]\e\^+$//
.eC
The next example converts the current line to uppercase:
.sC
:s/.*/\e\^U&/
.eC
This example underlines each letter in the current line, by
changing it into an ``underscore backspace letter'' sequence.
(The ^H is entered as ``CTRL\-V backspace''.):
.sC
:s/[a-zA-Z]/_^H&/g
.eC
This example locates the last colon in a line, and swaps the
text before the colon with the text after the colon.
The first \e\^(
\e\^) pair is used to delineate the stuff before the colon, and the
second pair delineates the stuff after.
In the substitution text,
\e\^1 and \e\^2 are given in reverse order, to perform the swap:
.sC
:s/\e\^(.*\e\^):\e\^(.*\e\^)/\e\^2:\e\^1/
.eC
.nH 2 "OPTIONS"
.LP
Options may be set or examined via the colon command ``set''.
The values of options will affect the operation of later commands.
.LP
For convenience, options have both a long descriptive name and a
short name which is easy to type.
You may use either name interchangeably.
.LP
.ne 5
.TS
center, tab(+);
cfB cfB cfB cfB cfB
cfB cfB cfB cfB cfB
l l l l l.
long+short+++
name+name+type+default+meaning
_
autoindent+ai+Bool+noai+auto-indent during input
autoprint+ap+Bool+ap in \fIex\fP,+print the current line
autowrite+aw+Bool+noaw+auto-write when switching files
charattr+ca+Bool+noca+interpret \e\^fX sequences?
cc+cc+Str+cc="cc \-c"+name of the C compiler
columns+co+Num+co=80+width of the screen
digraph+dig+Bool+nodig+recognize digraphs?
directory+dir+Str+dir="/usr/tmp"+where tmp files are kept
edcompatible+ed+Bool+noed+remember ":s//" options
errorbells+eb+Bool+eb+ring bell on error
exrefresh+er+Bool+er+write lines individually in \fIex\fP
flipcase+fc+Str+fc=""+non-ASCII chars flipped by ~
hideformat+hf+Bool+hf+hide text formatter commands
ignorecase+ic+Bool+noic+upper/lowercase match in search
inputmode+im+Bool+noim+start vi in insert mode?
keytime+kt+Num+kt=2+timeout for mapped key entry
keywordprg+kp+Str+kp="ref"+full path name of shift\-K prog
lines+ln+Num+ln=25+number of lines on the screen
list+li+Bool+noli+display lines in ``list'' mode
magic+ma+Bool+ma+use regular expression in search
make+mk+Str+mk="make"+name of the ``make'' program
modeline+ml+Bool+noml+are modelines processed?
paragraphs+pa+Str+pa="PPppIPLPQP"+names of ``paragraph'' nroff cmd
readonly+ro+Bool+noro+prevent overwriting of orig file
report+re+Num+re=5+report when 5 or more changes
scroll+sc+Num+sc=12+scroll amount for ^U and ^D
sections+se+Str+se="NHSHSSSEse"+names of ``section'' nroff cmd
shell+sh+Str+sh="/bin/sh"+full path name of the shell
showmatch+sm+Bool+nosm+show matching ()[]{}
showmode+smd+Bool+nosmd+say when in input mode
shiftwidth+sw+Num+sw=8+shift amount for < and >
sidescroll+ss+Num+ss=8+amount of sideways scrolling
sync+sy+Bool+nosy+call \fIsync\fP() often
tabstop+ts+Num+ts=8+width of tab characters
term+te+Str+te="$TERM"+name of the termcap entry
vbell+vb+Bool+vb+use visible alternative to bell
warn+wa+Bool+wa+warn for ! if file modified
wrapmargin+wm+Num+wm=0+wrap long lines in input mode
wrapscan+ws+Bool+ws+at EOF searches wrap to line 1
.TE
.LP
There are three types of options: Bool, string, and numeric.
Boolean options are made TRUE by giving the name of the option as
an argument to the ``set'' command; they are made FALSE by prefixing
the name with ``no''.
For example, ``set autoindent'' makes the
autoindent option TRUE, and ``set noautoindent'' makes it FALSE.
.LP
To change the value of a string or numeric option, pass the
``set'' command the name of the option, followed by an ``='' sign and
the option's new value.
For example, ``set tabstop=8'' will give the tabstop option a value of 8.
For string options, you may enclose the new value in quotes.
.nH 3 "AutoIndent"
.LP
During input mode, the autoindent option will cause each added
line to begin with the same amount of leading white space as the
line above it.
Without autoindent, added lines are initially empty.
.nH 3 "AutoPrint"
.LP
This option only affects
.I ex
mode.
If the autoprint option on,
and either the cursor has moved to a different line or the previous
command modified the file, then
.I elvis
will print the current line.
.nH 3 "AutoWrite"
.LP
When you are editing one file and decide to switch to another \-
via the :tag command, or :next command, perhaps \- if your current
file has been modified, then
.I elvis
will normally print an error
message and refuse to switch.
.LP
However, if the autowrite option is on, then
.I elvis
will write
the modified version of the current file and successfully switch to
the new file.
.nH 3 "CC"
.LP
The :cc command runs the C compiler.
This option should be set to the name of your compiler.
.nH 3 "CharAttr"
.LP
Many text formatting programs allow you to designate portions of
your text to be underlined, italicized, or boldface by embedding
the special strings \e\^fU, \e\^fI, and \e\^fB in your text.
The special string \e\^fR marks the end of underlined or boldface text.
.LP
.I Elvis
normally treats those special strings just like any other
text.
.LP
However, if the charattr option is on, then
.I elvis
will interpret
those special strings correctly, to display underlined or boldface
text on the screen.
(This only works, of course, if your terminal
can display underlined and boldface, and if the termcap entry says
how to do it.)
.nH 3 "COlumns"
.LP
This is a ``read only'' option.
You cannot change its value, but you can have
.I elvis
print it.
It shows how wide your screen is.
.nH 3 "DIGraph"
.LP
This option is used to enable/disable recognition of digraphs.
The default value is nodigraph, which means that digraphs will not
be recognized.
.nH 3 "DIRectory"
.LP
.I Elvis
stores text in temporary files.
This option allows you to
control which directory those temporary files will appear in.
The default is
.I /usr/tmp .
.LP
This option can only be set in a
.I .exrc
file; after that,
.I elvis
will have already started making temporary files in some other
directory, so it would be too late.
.nH 3 "EDcompatible"
.LP
This option affects the behavior of the
``:s/regexp/text/options'' command.
It is normally off (:se noed)
which causes all of the substitution options to be off unless
explicitly given.
.LP
However, with
.I edcompatible
on (:se ed), the substitution command
remembers which options you used last time.
Those same options will continue to be used until you change them.
In edcompatible mode,
when you explicitly give the name of a substitution option,
you will toggle the state of that option.
.nH 3 "ErrorBells"
.LP
.I Elvis
normally rings a bell when you do something wrong.
This option lets you disable the bell.
.nH 3 "ExRefresh"
.LP
The
.I ex
mode of
.I elvis
writes many lines to the screen.
You can make
.I elvis
either write each line to the screen separately, or save
up many lines and write them all at once.
.LP
The exrefresh option is normally on, so each line is written to
the screen separately.
.LP
You may wish to turn the exrefresh option off (:se noer) if the
``write'' system call is costly on your machine, or if you are using a
windowing environment.
(Windowing environments scroll text a lot
faster when you write many lines at once.)
.LP
This option has no effect in visual command mode or input mode.
.nH 3 "FlipCase"
.LP
The flipcase option allows you to control how the non-ASCII
characters are altered by the ``~'' command.
.LP
The string is divided into pairs of characters.
When ``~'' is
applied to a non-ASCII character,
.I elvis
looks up the character in
the flipcase string to see which pair it is in, and replaces it by
the other character of the pair.
.nH 3 "HideFormat"
.LP
Many text formatters require you to embed format commands in
your text, on lines that start with a ``.'' character.
.I Elvis
normally displays these lines like any other text, but if the
hideformat option is on, then format lines are displayed as blank
lines.
.nH 3 "IgnoreCase"
.LP
Normally, when
.I elvis
searches for text, it treats uppercase
letters as being different for lowercase letters.
.LP
When the ignorecase option is on, uppercase and lowercase are
treated as equal.
.nH 3 "InputMode"
.LP
This option allows you to have
.I elvis
start up in insert mode.
You can still exit insert mode at any time by hitting the ESC key,
as usual.
Usually, this option would be set in your
.I .exrc
file.
.nH 3 "KeyTime"
.LP
The arrow keys of most terminals send a multi-character
sequence.
It takes a measurable amount of time for these sequences to be transmitted.
The keytime option allows you to control the
maximum amount of time to allow for an arrow key (or other mapped
key) to be received in full.
.LP
The default keytime value is 2.
Because of the way
.UX
time-keeping works,
the actual amount of time allowed will vary
slightly, but it will always be between 1 and 2 seconds.
.LP
If you set keytime to 1, then the actual amount of time allowed
will be between 0 and 1 second.
This will generally make the
keyboard's response be a little faster (mostly for the ESC key),
but on those occasions where the time allowed happens to be closer
to 0 than 1 second,
.I elvis
may fail to allow enough time for an
arrow key's sequence to be received fully.
.LP
As a special case, you can set keytime to 0 to disable this time
limit stuff altogether.
The big problem here is: If your arrow
keys' sequences start with an ESC, then every time you hit your ESC
key
.I elvis
will wait... and wait... to see if maybe that ESC was
part of an arrow key's sequence.
.LP
NOTE: this option is a generalization of the timeout option of
the real
.I vi .
.nH 3 "KeywordPrg"
.LP
.I Elvis
has a special keyword lookup feature.
You move the cursor
onto a word, and hit shift\-K, and
.I elvis
uses another program to
look up the word and display information about it.
.LP
This option says which program gets run.
.LP
The default value of this option is ``ref'', which is a program
that looks up the definition of a function in C.
It looks up the function name in a file called ``refs''
which is created by ctags.
.LP
You can substitute other programs, such as an English dictionary
program or the on-line manual.
.I Elvis
runs the program, using the keyword as its only argument.
The program should write information to
.I stdout .
The program's exit status should be 0, unless you want
.I elvis
to
print ``<<< failed >>>''.
.nH 3 "LiNes"
.LP
This ``read only'' option shows how many lines you screen has.
.nH 3 "LIst"
.LP
In nolist mode (the default),
.I elvis
displays text in a ``normal''
manner \(em with tabs expanded to an appropriate number of spaces,
etc.
.LP
However, sometimes it is useful to have tab characters displayed
differently.
In list mode, tabs are displayed as ``^I'', and a ``$''
is displayed at the end of each line.
.nH 3 "MAgic"
.LP
The search mechanism in
.I elvis
can accept ``regular expressions''
\(em strings in which certain characters have special meaning.
.LP
The magic option is normally on, which causes these characters
to be treated specially.
.LP
If you turn the magic option off (:se noma), then all characters
except ^ and $ are treated literally.
\&^ and $ retain their special meanings regardless of the setting of magic.
.nH 3 "MaKe"
.LP
The :make command runs your ``make'' program.
This option defines the name of your ``make'' program.
.nH 3 "ModeLine"
.LP
.I Elvis
supports modelines.
Modelines are lines near the beginning or end of your text file which
contain ``ex:yowza:'', where ``yowza'' is any
.I ex
command.
A typical ``yowza'' would be something
like ``set ts=4 ca kp=spell''.
.LP
Normally these lines are ignored, for security reasons, but if
you have ``set modeline'' in your
.I .exrc
file then ``yowza'' is executed.
.nH 3 "PAragraphs"
.LP
The { and } commands move the cursor forward or backward in
increments of one paragraph.
Paragraphs may be separated by blank
lines, or by a ``dot'' command of a text formatter.
Different text formatters use different ``dot'' commands.
This option allows you to
configure
.I elvis
to work with your text formatter.
.LP
It is assumed that your formatter uses commands that start with
a ``.'' character at the front of a line, and then have a one- or
two-character command name.
.LP
The value of the paragraphs option is a string in which each
pair of characters is one possible form of your text formatter's
paragraph command.
.nH 3 "ReadOnly"
.LP
Normally,
.I elvis
will let you write back any file to which you
have write permission.
If you do not have write permission, then
you can only write the changed version of the file to a
.B different
file.
.LP
If you set the readonly option, then
.I elvis
will pretend you
do not have write permission to
.B any
file you edit.
It is useful when you really only mean to use
.I elvis
to look at a file, not to
change it.
This way you cannot change it accidentally.
.LP
This option is normally off, unless you use the ``view'' alias of
.I elvis .
.I View
is like
.I vi
except that the readonly option is on.
.nH 3 "REport"
.LP
Commands in
.I elvis
may affect many lines.
For commands that affect a lot of lines,
.I elvis
will output a message
saying what was done and how many lines were affected.
This option allows you to define what ``a lot of lines'' means.
The default is 5, so any
command which affects 5 or more lines will cause a message to be shown.
.nH 3 "SCroll"
.LP
The ^U and ^D keys normally scroll backward or forward by half a
screen full, but this is adjustable.
The value of this option says how many lines those keys should scroll by.
.nH 3 "SEctions"
.LP
The [[ and ]] commands move the cursor backward or forward in
increments of 1 section.
Sections may be delimited by a {
character in column 1 (which is useful for C source code) or by
means of a text formatter's ``dot'' commands.
.LP
This option allows you to configure
.I elvis
to work with your text
formatter's ``section'' command, in exactly the same way that the
paragraphs option makes it work with the formatter's ``paragraphs''
command.
.nH 3 "SHell"
.LP
When
.I elvis
forks a shell (perhaps for the :! or :shell
commands) this is the program that is uses as a shell.
This is ``/bin/sh'' by default, unless you have set the
.cW SHELL
(or
.cW COMSPEC,
for MS-DOS) environment variable, it which case the default value
is copied from the environment.
.nH 3 "ShiftWidth"
.LP
The < and > commands shift text left or right by some uniform number of columns.
The shiftwidth option defines that ``uniform number''.
The default is 8.
.nH 3 "ShowMatch"
.LP
With showmatch set, in input mode every time you hit one of )}],
.I elvis
will momentarily move the cursor to the matching ({[ and then return
to the original position.
If there is no matching ({[ then it will beep at you.
.nH 3 "ShowMoDe"
.LP
In visual mode, it is easy to forget whether you are in the
visual command mode or input/replace mode.
Normally, the showmode
option is off, and you have not a clue as to which mode you are in.
If you turn the showmode option on, though, a little message will
appear in the lower right-hand corner of your screen, telling you
which mode you are in.
.nH 3 "SideScroll"
.LP
For long lines,
.I elvis
scrolls sideways.
(This is different from the real
.I vi ,
which wraps a single long line onto several rows of the screen.)
.LP
To minimize the number of scrolls needed,
.I elvis
moves the screen
sideways by several characters at a time.
The value of this option
says how many characters' widths to scroll at a time.
.LP
Generally, the faster your screen can be redrawn, the lower the
value you will want in this option.
.nH 3 "SYnc"
.LP
If the system crashes during an edit session, then most of your
work can be recovered from the temporary file that
.I elvis
uses to
store changes.
However, sometimes the OS will not copy changes to
the hard disk immediately, so recovery might not be possible.
The [no]sync option lets you control this.
.LP
In nosync mode (which is the default, for
.UX ),
.I elvis
lets the
operating system control when data is written to the disk.
This is generally faster.
.LP
In sync mode (which is the default, for MS-DOS),
.I elvis
forces
all changes out to disk every time you make a change.
This is generally safer, but slower.
It can also be a rather rude thing to do on a multi-user system.
.nH 3 "TabStop"
.LP
Tab characters are normally 8 characters wide, but you can
change their widths by means of this option.
.nH 3 "TErm"
.LP
This ``read only'' option shows the name of the termcap entry that
.I elvis
is using for your terminal.
.nH 3 "VBell"
.LP
If your termcap entry describes a visible alternative to ringing
your terminal's bell, then this option will say whether the visible
version gets used or not.
Normally it will be.
.LP
If your termcap does
.B not
include a visible bell capability, then
the vbell option will be off, and you cannot turn it on.
.nH 3 "WArn"
.LP
If you have modified a file but not yet written it back to disk,
then
.I elvis
will normally print a warning before executing a ``:!cmd''
command.
However, in nowarn mode, this warning is not given.
.LP
.I Elvis
also normally prints a message after a successful search
that wrapped at EOF.
The [no]warn option can also disable this warning.
.nH 3 "WrapMargin"
.LP
Normally (with wrapmargin=0)
.I elvis
will let you type in
extremely long lines, if you wish.
.LP
However, with wrapmargin set to something other that 0
(wrapmargin=10 is nice),
.I elvis
will automatically cause long lines
to be ``wrapped'' on a word break for lines longer than wrapmargin's
setting.
.nH 3 "WrapScan"
.LP
Normally, when you search for something,
.I elvis
will find it no
matter where it is in the file.
.I Elvis
starts at the cursor position, and searches forward.
If
.I elvis
hits EOF without finding
what you are looking for, then it wraps around to continue searching
from line 1.
.LP
If you turn off the wrapscan option (:se nows), then when
.I elvis
hits EOF during a search, it will stop and say so.
.nH 2 "CUT BUFFERS"
.LP
When
.I elvis
deletes text, it stores that text in a cut buffer.
This happens in both visual mode and
.I ex
mode.
There is no practical limit to how much text a cut buffer can hold.
.LP
There are 36 cut buffers: 26 named buffers ("a through "z), 9
anonymous buffers ("1 through "9), and 1 extra cut buffer (".).
.LP
In
.I ex
mode, the :move and :copy commands use a cut buffer to
temporarily hold the text to be moved/copied.
.nH 3 "Filling"
.LP
In visual mode, text is copied into a cut buffer when you use
the d, y, c, C, or s commands.
.LP
By default, the text goes into the "1 buffer.
The text that used to be in "1 gets shifted into "2,
"2 gets shifted into "3, and so on.
The text that used to be in "9 is lost.
This way, the last 9 things you deleted are still accessible.
.LP
You can also put the text into a named buffer \(em "a through "z.
To do this, you should type the buffer's name (two keystrokes: a
double-quote and a lowercase letter) before the d/y/c/C/s command.
When you do this, "1 through "9 are not affected by the cut.
.LP
You can append text to one of the named buffers.
To do this, type the buffer's name in uppercase (a double-quote and an
uppercase letter) before the d/y/c/C/s command.
.LP
The "\. buffer is special.
It is not affected by the d/y/c/C/s command.
Instead, it stores the text that you typed in the last
time you were in input mode.
It is used to implement the ``.'' visual command, and ^A in input mode.
.LP
In
.I ex
mode (also known as colon mode), the :delete, :change, and
:yank commands all copy text into a cut buffer.
Like the visual commands, these
.I ex
commands normally use the "1 buffer,
but you can use one of the named buffers by giving its name after the command.
For example,
.sC
:20,30y a
.eC
will copy lines 20 through 30 into cut buffer "a.
.LP
You cannot directly put text into the "\. buffer, or the "2
through "9 buffers.
.nH 3 "Pasting from a Cut Buffer"
.LP
There are two styles of pasting: line-mode and character-mode.
If a cut buffer contains whole lines (from a command like ``dd'')
then line-mode pasting is used; if it contains partial lines (from
a command like ``dw'') then character-mode pasting is used.
The
.I ex
commands always cut whole lines.
.LP
Character-mode pasting causes the text to be inserted into the
line that the cursor is on.
.LP
Line-mode pasting inserts the text on a new line above or below
the line that the cursor is on.
It does not affect the cursor's line at all.
.LP
In visual mode, the p and P commands insert text from a cut
buffer.
Uppercase P will insert it before the cursor, and
lowercase p will insert it after the cursor.
Normally, these commands will paste from the "1 buffer, but you can specify any
other buffer to paste from.
Just type its name (a double-quote and
another character) before you type the P or p.
.LP
In
.I ex
mode, the (pu)t command pastes text after a given line.
To paste from a buffer other that "1, enter its name after the
command.
.nH 3 "Macros"
.LP
The contents of a named cut buffer can be executed as a series
of
.I ex/vi
commands.
.LP
To put the instructions into the cut buffer, you must first
insert them into the file, and then delete them into a named cut
buffer.
.LP
To execute a cut buffer's contents as
.I ex
commands, you should
give the
.I ex
command ``@'' and the name of the buffer.
For example, :@z will execute "z as a series of
.I ex
commands.
.LP
To execute a cut buffer's contents as visual commands, you
should give the visual command ``@'' and the letter of the buffer's
name.
The visual ``@'' command is different from the
.I ex
``@'' command.
They interpret the cut buffer's contents differently.
.LP
The visual @ command can be rather finicky.
Each character in the buffer is interpreted as a keystroke.
If you load the instructions into the cut buffer via a "zdd command, then the
newline character at the end of the line will be executed just like
any other character, so the cursor would be moved down 1 line.
If you do not want the cursor to move down 1 line at the end of each @z
command, then you should load the cut buffer by saying 0"zD
instead.
.LP
Although cut buffers may hold any amount of text,
.I elvis
can only
.I execute
small buffers.
For
.I ex
mode, the buffer is limited to about 1k bytes.
For visual mode, the buffer is limited to about 80 bytes.
If a buffer is too large to execute, an error message is displayed.
.LP
You cannot nest @ commands.
You cannot run @ commands from your
.I .exrc
file, or any other :source file
either.
Similarly, you cannot run a :source command from within an @ command.
Hopefully, these restrictions will be lifted in a later version.
.nH 3 "The Effect of Switching Files"
.LP
When
.I elvis
first starts up, all cut buffers are empty.
When you switch to a different file (via the :n or :e commands perhaps) the
9 anonymous cut buffers are emptied again, but the other 27 buffers
retain their text.
.nH 2 "DIFFERENCES BETWEEN ELVIS & BSD VI/EX"
.LP
.nH 3 "Extensions"
.LP
.sC
:mkexrc
:mk
.eC
.LP
This
.I ex
command saves the current :set and :map configurations
in the
.I .exrc
file in your current directory.
.LP
.sC
:Next
:previous
:N
:pre
.eC
These commands move backwards through the args list.
.sC
zz
.eC
In visual command mode, the (lowercase) ``zz'' command will center
the current line on the screen, like ``z=''.
.sC
\.
.eC
The default count value for ``.'' is the same as the previous
command which ``.'' is meant to repeat.
However, you can supply a new count if you wish.
For example, after ``3dw'', ``.'' will delete 3
words, but ``5.'' will delete 5 words.
.sC
\&".
.eC
The text which was most recently input (via a ``cw'' command, or
something similar) is saved in a cut buffer called "\. (which is a
pretty hard name to write in an English sentence).
.sC
K
.eC
In visual command mode, you can move the cursor onto a word and
press shift\-K to have
.I elvis
run a reference program to look that word up.
This command alone is worth the price of admission!
See the ctags and ref programs.
.sC
#
.eC
In visual command mode, you can move the cursor onto a number
and then hit ## or #+ to increment that number by 1.
To increment it by a larger amount, type in the increment value before
hitting the initial #.
The number can also be decremented or set by hitting #\- or #=, respectively.
.sC
input
.eC
You can backspace past the beginning of the line.
The arrow keys work in input mode.
.LP
If you type CTRL\-A, then the text that you input last time is
inserted.
You will remain in input mode, so you can backspace over
part of it, or add more to it.
(This is sort of like CTRL\-@ on
the real
.I vi ,
except that CTRL\-A really works.)
.LP
CTRL\-P will insert the contents of the cut buffer.
.LP
Real
.I vi
can only remember up to 128 characters of input, but
.I elvis
can remember any amount.
.LP
The ^T and ^D keys can adjust the indent of a line no matter
where the cursor happens to be in that line.
.LP
You can save your file and exit
.I elvis
directly from input mode
by hitting CTRL\-Z twice.
.LP
.I Elvis
supports digraphs as a way to enter non-ASCII characters.
.sC
:set inputmode
:se im
.eC
If you set this flag in your
.I .exrc
file, then
.I elvis
will start
up in input mode instead of visual command mode.
.sC
:set charattr
:se ca
.eC
.I Elvis
can display ``backslash\-f'' style character attributes on
the screen as you edit.
The following example shows the recognized
attributes:
.DS
normal \e\^fBboldface\e\^fR \e\^fIitalics\e\^fR \e\^fUunderlined\e\^fR normal
.DE
NOTE: you must compile
.I elvis
without the
.cW \-DNO_CHARATTR
flag for this to work.
.sC
:set sync
:se sy
.eC
After a crash, you can usually recover the altered form of the
file from the temporary file that
.I elvis
uses.
With the sync option turned on,
the odds are shifted a little more in your favor because
.I elvis
will perform a
.I sync ()
call after each change has been written to the temporary file.
.sC
cursor shape
.eC
If your terminal's termcap entry includes the necessary capabilities,
.I elvis
changes the shape of the cursor to indicate which mode you are in.
.sC
:set hideformat
:se hf
.eC
This option hides format control lines.
(They are displayed on the screen as blank lines.)
.sC
:errlist
*
elvis -m
.eC
.I Elvis
is clever enough to parse the error messages emitted by many compilers.
To use this feature, you should collect your
compiler's error messages into a file called
.I errlist ;
.I elvis
will read this file, determine which source file caused the error
messages, start editing that file, move the cursor to the line
where the error was detected, and display the error message on the
status line.
.nH 3 "Omissions"
.LP
The replace mode is a hack.
It does not save the text that it
overwrites.
.LP
Long lines are displayed differently \(em where the real
.I vi
would wrap a long line onto several rows of the screen,
.I elvis
simply
displays part of the line, and allows you to scroll the screen
sideways to see the rest of it.
.LP
The ``:preserve'' and ``:recover'' commands are missing.
So is the
.B \-r
flag.
Since ``:recover'' is used so rarely it was implemented as a
separate program.
There's no need to load the recovery code into
memory every time you edit a file.
.LP
LISP support is missing.
.LP
Due to naming conventions used for the temporary files,
.I elvis
can be creating no more that one new file per directory at any given time.
Any number of existing files can be edited at the same
time on multitasking computer systems, but only one new file can be
created simultaneously per directory.
To relieve this problem, you
would have to edit tmp.c and elvrec.c This is expected to be done in
version 1.5
.LP
Autoindent mode acts a little different from the real
.I vi .
It is still quite useful, but if you frequently use both
.I vi
and
.I elvis
then the differences may be annoying.
Autoindent is
.B gradually
improving.
.LP
The visual ``put'' command cannot be repeated by hitting the .
key.
.nH 2 "INTERNAL"
.LP
You do not need to know the material in this section to use
.I elvis .
You only need it if you intend to modify
.I elvis .
.nH 3 "The temporary file"
.LP
The temporary file is divided into blocks of 1024 bytes each.
.LP
When
.I elvis
starts up, the file is copied into the temporary file.
Small amounts of extra space are inserted into the temporary
file to insure that no text lines cross block boundaries; this
speeds up processing and simplifies storage management.
The ``extra space`` is filled with NUL characters; the input file must not
contain any NULs, to avoid confusion.
.LP
The first block of the temporary file is an array of shorts
which describe the order of the blocks; that is, header[1] is the
block number of the first block, and so on.
This limits the temporary file to 512 active blocks,
so the largest file you can edit is about 400K bytes long!
.LP
When blocks are altered, they are rewritten to a
.B different
block in the file, and the in-core version of the header block is updated
accordingly.
The in-core header block will be copied to the temp
file immediately before the next change... or, to undo this
change, swap the old header (from the temp file) with the new
(in-core) header.
.LP
.I Elvis
maintains another in-core array which contains the
line-number of the last line in every block.
This allows you to go
directly to a line, given its line number.
.nH 3 "Implementation of Editing"
.LP
There are three basic operations which affect text:
.DS
\(bu delete text \- delete(from, to)
\(bu add text \- add(at, text)
\(bu yank text \- cut(from, to)
.DE
To yank text, all text between two text positions is copied into a cut buffer.
The original text is not changed.
To copy the text into a cut buffer, you need only remember which physical blocks
that contain the cut text, the offset into the first block of the start of the
cut, the offset into the last block of the end of the cut, and what kind of
cut it was.
(Cuts may be either character
cuts or line cuts; the kind of a cut affects the way it is later
``put''.)
This is implemented in the function
.I cut () .
.LP
To delete text, you must modify the first and last blocks, and
remove any reference to the intervening blocks in the header's list.
The text to be deleted is specified by two marks.
This is implemented in the function
.I delete ().
.LP
To add text, you must specify the text to insert (as a
null-terminated string) and the place to insert it (as a mark).
The block into which the text is to be inserted may need to be split
into as many as four blocks, with new intervening blocks needed as
well... or it could be as simple as modifying a single block.
This is implemented in the function
.I add ().
.LP
Other interesting functions are
.I paste ()
(to copy text from a cut buffer into the file),
.I modify ()
(for an efficient way to implement a combined delete/add sequence), and
.I input ()
(to get text from the user and insert it into the file).
.LP
When text is modified, an internal file-revision counter, called
``changes'', is incremented.
This counter is used to detect when certain caches are out of date.
(The ``changes'' counter is also
incremented when we switch to a different file, and also in one or
two similar situations \(em all related to invalidating caches.)
.nH 3 "Marks and the Cursor"
.LP
Marks are places within the text.
They are represented
internally as a long variable which is split into two bit-fields: a
line number and a character index.
Line numbers start with 1, and
character indexes start with 0.
.LP
Since line numbers start with 1, it is impossible for a set mark
to have a value of 0L.
0L is therefore used to represent unset
marks.
.LP
When you do the ``delete text'' change, any marks that were part
of the deleted text are unset, and any marks that were set to
points after it are adjusted.
Similarly, marks are adjusted after
new text is inserted.
.LP
The cursor is represented as a mark.
.nH 3 "Colon Command Interpretation"
.LP
Colon commands are parsed, and the command name is looked up in
an array of structures which also contain a pointer to the function
that implements the command, and a description of the arguments
that the command can take.
If the command is recognized and its
arguments are legal, then the function is called.
.LP
Each function performs its task; this may cause the cursor to be
moved to a different line, or whatever.
.nH 3 "Screen Control"
.LP
The screen is updated via a package which looks like the
``curses'' library, but is not.
It is actually much simpler.
Most curses operations are implemented as macros which copy characters
into a large I/O buffer, which is then written with a single large
.I write ()
call as part of the
.I refresh ()
operation.
.LP
The functions which modify text (namely
.I add ()
and
.I delete ())
remember where text has been modified.
They do this by calling the function
.I redrawrange ().
The screen redrawing function,
.I redraw (),
uses these clues to help it reduce the amount of text that is redrawn each time.
.nH 3 "Portability"
.LP
To improve portability,
.I elvis
collects as many of the
system-dependent definitions as possible into the config.h file.
This file begins with some preprocessor instructions which attempt
to determine which compiler and operating system you have.
After that, it conditionally defines some macros and constants for your system.
.LP
One of the more significant macros is
.I ttyread(buf, n) .
This macro is used to read raw characters from the keyboard.
An attempt to read may be cut short by a
.cW SIGALRM
signal.
For
.UX
systems, this simply reads bytes from
.I stdin .
For MSDOS, TOS, and OS9,
.I ttyread ()
is a function defined in
.I curses.c .
There is also a
.I ttywrite ()
macro.
.LP
The
.I tread ()
and
.I twrite ()
macros are versions of
.I read ()
and
.I write ()
that are used for text files.
On
.UX
systems, these are equivalent to
.I read ()
and
.I write ().
On MS-DOS, these are also equivalent to
.I read ()
and
.I write (),
since DOS libraries are generally
clever enough to convert newline characters automatically.
For Atari TOS, though, the MWC library is too stupid to do this, so we
had to do the conversion explicitly.
.LP
Other macros may substitute
.I index ()
for
.I strchr (),
or
.I bcopy ()
for
.I memcpy (),
or map the ``void'' data type to ``int'', or whatever.
.LP
The file
.I tinytcap.c
contains a set of functions that emulate
the termcap library for a small set of terminal types.
The terminal-specific info is hard-coded into this file.
It is only used for systems that do not support real termcap.
Another alternative for screen control can be seen in the
.I curses.h
and
.I pc.c
files.
Here, macros named
.cW VOIDBIOS
and
.cW CHECKBIOS
are used to indirectly call functions which perform low-level screen
manipulation via BIOS calls.
.LP
The
.I stat ()
function must be able to come up with
.UX -style
major/minor/inode numbers that uniquely identify a file or
directory.
.LP
Please try to keep you changes localized, and wrap them in
#if/#endif pairs, so that
.I elvis
can still be compiled on other
systems.
And please forward updates to the author so that they can be
incorporated into the latest-and-greatest version of
.I elvis .
.nH 2 "CFLAGS"
.LP
.I Elvis
uses many preprocessor symbols to control compilation.
Some of these control the sizes of buffers and such.
The
.cW \-DNO_XXXX
options remove small sets of related features.
.LP
Most
.I elvis
users will probably want to keep all features
available.
Minix-PC users, though, will have to sacrifice some
sets because otherwise
.I elvis
would be too bulky to compile.
The ``asld'' phase of the compiler craps out.
.IP "\*<\-DM_SYSV, \-DTOS, \-DCOHERENT\*>"
.br
These flags tell the compiler that
.I elvis
is being compiled
for System-V
.UX ,
Atari TOS, or Coherent, respectively.
For other systems, the config.h file can generally figure it
out automatically.
.IP "\*<\-DDATE\*>=\fIstring\fP"
.br
.cW DATE
should be defined to be a string constant.
It is printed by the :version command as the compilation date of
the program.
.IP
It is only used in
.I cmd1.c ,
and even there you may leave it undefined without causing an urp.
.IP "\*<\-DNBUFS\*>=\fInumber\fP"
.I Elvis
keeps most of your text in a temporary file; only a
small amount is actually stored in RAM.
This flag allows you to control how much of the file can be in RAM at any time.
The default is 5 blocks.
(See the
.cW \-DBLKSIZE
flag, below.)
.sp
More RAM allows global changes to happen a little faster.
If you are just making many small changes in one section of a
file, though, extra RAM will not help much.
.IP "\*<\-DBLKSIZE\*>=\fInumber\fP"
.br
This controls the size of blocks that
.I elvis
uses internally.
The value of
.cW BLKSIZE
must be a power of two.
The default value is 1024, which allows you to edit files up
to almost 512K bytes long.
Every time you double
.cW BLKSIZE ,
you quadruple the size of a text file that
.I elvis
can handle,
but you also cause the temporary file to grow faster.
.IP "\*<\-DTMPDIR\*>=\fIstring\fP"
.br
This sets the default value of the ``directory'' option, which
specifies where the temporary files should reside.
The value of
.cW TMPDIR
must be a string, so be sure your value
includes the quote characters on each end.
.IP "\*<\-DEXRC\*>=\fIstr\fP, \*<\-DHMEXRC\*>=\fIstr\fP, \*<\-DSYSEXRC\*>=\fIstr\fP, \*<\-DEXINIT\*>=\fIstr\fP"
.br
This lets you control the names of the initialization
files.
Their values must be strings, so be careful about quoting.
.IP
.cW EXRC
is the name of the initialization file in the current directory.
Its default value is
.I .exrc
on \*(Am.
For other systems, check the config.h file.
.IP
.cW HMEXRC
is the name of the initialization file in your home directory.
By default, it is the same as
.cW EXRC .
.I Elvis
will automatically prepend the name of your home directory to
.cW HMEXRC
at run time, so do not give a full path name.
.IP
.cW SYSEXRC
is the name of a system-wide initialization file.
It has no default value; if you do not define a value for it,
then the code that supports
.cW SYSEXRC
just is not compiled.
The value of
.cW SYSEXRC
should be a full path name, in quotes.
.IP
.cW EXINIT
is the name of an environment variable that can
contain initialization commands.
Normally, its value is ``EXINIT''.
.IP "\*<\-DKEYWORDPRG\*>=\fIstring\fP"
.br
This flag determines the default value of the ``keywordprg'' option.
Its value must be a string, so be careful about quoting.
The default value of this flag is ``ref'', which is
a C reference program.
.IP "\*<\-DCC_COMMAND\*>=\fIstring\fP \*<\-DMAKE_COMMAND\*>=\fIstring\fP \*<\-DERRLIST\*>=\fIstring\fP"
.br
These control the names of the C compiler, the
.I make
utility, and the error output file, respectively.
They are only used if
.cW \-DNO_ERRLIST
is not given.
.IP "\*<\-DMAXMAPS\*>=\fInumber\fP"
.br
This controls the capacity of the key map table.
.IP "\*<\-DMAXRCLEN\*>=\fInumber\fP"
.br
This determines how large a
.I .exrc
file can be (measured in bytes).
The default is 1000 bytes.
If you increase this value significantly, then you may need to allocate extra
memory for the stack.
See the
.cW CHMEM
setting in the
.I Makefile .
.IP "\*<\-DSHELL\*>=\fIstring\fP"
.br
This is the default value of the ``shell'' option, and hence
the default shell used from within
.I elvis .
This only controls the default; the value you give here may be
overridden at run-time by setting an environment variable
named
.cW SHELL
(or
.cW COMSPEC
for MS-DOS).
Its value must be a string constant, so be careful about quoting.
.IP "\*<\-DTAGS\*>=\fIstring\fP"
.br
This sets the name of the ``tags'' file, which is used by the :tag command.
Its value must be a string constant, so be careful about quoting.
.IP \*<\-DCS_IBMPC\*>
.br
The digraph table and flipcase option will normally start out empty.
However, if you add
.cW \-DCS_IBMPC
or
.cW \-DCS_LATIN1
to your CFLAGS, then they will start out filled with values
that are appropriate for the IBM PC character set or the ISO
Latin\-1 character set, respectively.
.IP \*<\-DDEBUG\*>
.br
This adds the ``:debug'' and ``:validate'' commands, and also
adds many internal consistency checks.
It increases the
size of the ``.text'' segment by about 6K.
.IP \*<\-DCRUNCH\*>
.br
This flag removes some non-critical code, so that
.I elvis
is smaller.
For example, it removes a short-cut from the
regexp package, so that text searches are slower.
Also, screen updates are not as efficient.
A couple of obscure features are disabled by this, too.
.IP \*<\-DNO_MKEXRC\*>
.br
This removes the ``:mkexrc'' command, so you have to create
any
.I .exrc
files manually.
The size of the .text segment will be reduced by about 600 bytes.
.IP \*<\-DNO_CHARATTR\*>
.br
Permanently disables the charattr option.
This reduces the size of your ``.text'' segment by about 850 bytes.
.IP \*<\-DNO_RECYCLE\*>
.br
Normally,
.I elvis
will recycle space (from the tmp file) which
contains totally obsolete text.
This flag disables this recycling.
Without recycling, the ``.text'' segment is about 1K smaller than it would
otherwise be, but the tmp file grows much faster.
If you have a lot of free space on your hard disk,
but
.I elvis
is too bulky to run with recycling, then try it without recycling.
.IP
When using a version of
.I elvis
that has been compiled with
.cW \-DNO_RECYCLE ,
you should be careful to avoid making many
small changes to a file because each individual change will
cause the tmp file to grow by at least 1k.
Hitting ``x'' thirty times counts as thirty changes, but typing ``30x''
counts as one change.
Also, you should occasionally do a ``:w'' followed by a ``:e'' to start with
a fresh tmp file.
.IP \*<\-DNO_SENTENCE\*>
.br
Leaves out the ``('' and ``)'' visual mode commands.
Also, the ``[['', ``]]'', ``{'', and ``}'' commands will not recognize *roff
macros.
The sections and paragraphs options go away.
This saves about 650 bytes in the ``.text'' segment.
.IP \*<\-DNO_CHARSEARCH\*>
.br
Leaves out the visual commands which locate a given
character in the current line: ``f'', ``t'', ``F'', ``T'', ``,'' and
``;''.
This saves about 900 bytes.
.IP \*<\-DNO_EXTENSIONS\*>
Leaves out the ``K'' and ``#'' visual commands.
Also, the arrow keys will no longer work in input mode.
(Other extensions are either inherent in the design of
.I elvis ,
or are
controlled by more specific flags, or are too tiny to be
worth removing.)
This saves about 250 bytes.
.IP \*<\-DNO_MAGIC\*>
.br
Permanently disables the ``magic'' option, so that most
meta-characters in a regular expression are
.B not
recognized.
This saves about 3k of space in the ``.text''
segment, because the complex regular expression code can be
replaced by much simpler code.
.IP \*<\-DNO_SHOWMODE\*>
.br
Permanently disables the ``showmode'' option, saving about 250 bytes.
.IP "
.br
Normally,
.I elvis
tries to adjust the shape of the cursor as a
reminder of which mode you are in.
The
.cW \-DNO_CURSORSHAPE
flag disables this, saving about 150 bytes.
.IP \*<\-DNO_DIGRAPH\*>
.br
To allow entry of non-ASCII characters,
.I elvis
supports digraphs.
A digraph is a single (non-ASCII) character which
is entered as a combination of two other (ASCII) characters.
If you do not need to input non-ASCII
characters, or if your keyboard supports a better way of
entering non-ASCII characters, then you can disable the
digraph code and save about 450 bytes.
.IP \*<\-DNO_ERRLIST\*>
.br
.I Elvis
adds a ``:errlist'' command, which is useful to programmers.
If you do not need this feature, you can disable it via the
.cW \-DNO_ERRLIST
flag.
This will reduce the .text segment by about 900 bytes, and the .bss segment by
about 300 bytes.
.IP \*<\-DNO_ABBR\*>
.br
The
.cW \-DNO_ABBR
flag disables the ``:abbr'' command, and reduces
the size of
.I elvis
by about 600 bytes.
.IP \*<\-DNO_OPTCOLS\*>
When
.I elvis
displays the current options settings via the
``:set'' command, the options are normally sorted into
columns.
The
.cW \-DNO_OPTCOLS
flag causes the options to be sorted across the rows,
which is much simpler.
The
.cW \-DNO_OPTCOLS
flag will reduce the size of your .text segment
by about 500 bytes.
.IP \*<\-DNO_MODELINE\*>
.br
This removes all support for modelines.
.nH 2 "TERMCAP"
.LP
.I Elvis
uses fairly standard termcap fields for most things.
The cursor shape names are non-standard but other than that there should be
no surprises.
.nH 3 "Required numeric fields"
.LP
.nf
.in 1.5c
:co#: number of columns on the screen (characters per line)
:li#: number of lines on the screen
.in
.fi
.nH 3 "Required string fields"
.LP
.nf
.in 1.5c
:ce=: clear to end-of-line
:cl=: home the cursor & clear the screen
:cm=: move the cursor to a given row/column
:up=: move the cursor up one line
.in
.fi
.nH 3 "Boolean fields"
.LP
.nf
.in 1.5c
:am: auto margins \- wrap when a char is written to the last column?
:pt: physical tabs?
.in
.fi
.nH 3 "Optional string fields"
.LP
.nf
.in 1.5c
:al=: insert a blank row on the screen
:dl=: delete a row from the screen
:cd=: clear to end of display
:ei=: end insert mode
:ic=: insert a blank character
:im=: start insert mode
:dc=: delete a character
:sr=: scroll reverse (insert a row at the top of the screen)
:vb=: visible bell
:ti=: terminal initialization string, to start full-screen mode
:te=: terminal termination, to end full-screen mode
:ks=: enables the cursor keypad
:ke=: disables the cursor keypad
.in
.fi
.nH 3 "Optional strings received from the keyboard"
.LP
.nf
.in 1.5c
:kd=: sequence sent by the <down arrow> key
:kl=: sequence sent by the <left arrow> key
:kr=: sequence sent by the <right arrow> key
:ku=: sequence sent by the <up arrow> key
:kP=: sequence sent by the <PgUp> key
:kN=: sequence sent by the <PgDn> key
:kh=: sequence sent by the <Home> key
:kH=: sequence sent by the <End> key
.in
.fi
.LP
Originally, termcap did not have any names for the <PgUp>,
<PgDn>, <Home>, and <End> keys.
Although the capability names
shown in the table above are the most common, they are
.B not
universal.
SCO Xenix uses :PU=:PD=:HM=:EN=: for those keys.
Also, if the four arrow keys happen to be part of a 3x3 keypad, then the
five non-arrow keys may be named :K1=: through :K5=:, so an IBM PC
keyboard may be described using those names instead.
.I Elvis
can recognize any of these names.
.nH 3 "Optional fields that describe character attributes"
.LP
.nf
.in 1.5c
:so=: :se=: start/end standout mode (We do not care about :sg#:)
:us=: :ue=: start/end underlined mode
:md=: :me=: start/end boldface mode
:as=: :ae=: start/end alternate character set (italics)
:ug#: visible gap left by :us=:ue=:md=:me=:as=:ae=:
.in
.fi
.nH 3 "Optional fields that affect the cursor's shape"
.LP
The :cQ=: string is used by
.I elvis
immediately before exiting to
undo the effects of the other cursor shape strings.
If :cQ=: is not given, then all other cursor shape strings are ignored.
.LP
.nf
.in 1.5c
:cQ=: normal cursor
:cX=: cursor shape used for reading \fIex\fP command \(em steady underline
:cV=: cursor shape used for reading \fIvi\fP commands \(em steady block
:cI=: cursor shape used during \fIvi\fP input mode \(em blinking underline
:cR=: cursor shape used during \fIvi\fP replace mode \(em blinking block
.in
.fi
.LP
If the capabilities above are not given, then
.I elvis
will try to
use the following values instead.
.LP
.nf
.in 1.5c
:ve=: normal cursor, used as :cQ=:cX=:cI=:cR=:
:vs=: gaudy cursor, used as :cV=:
.in
.fi
.nH 2 "ENVIRONMENT VARIABLES"
.LP
.I Elvis
examines several environment variables when it starts up.
The values of these variables are used internally for a variety of
purposes.
You do not need to define all of these; on most systems,
.I elvis
only requires
.cW TERM
to be defined.
On MS-DOS systems, even that is optional.
.nH 3 "TERM, TERMCAP"
.LP
.cW TERM
tells
.I elvis
the name of the termcap entry to use.
.cW TERMCAP
may contain either the entire termcap entry, or the full path name
of the
.I termcap
file to search through.
.nH 3 "TMP, TEMP"
.LP
These only work for MS-DOS and Atari TOS.
Either of these variables may be used to set the ``directory'' option,
which controls where temporary files are stored.
If you define them both, then
.cW TMP
is used, and
.cW TEMP
is ignored.
.nH 3 "EXINIT"
.LP
This variable may contain a colon-mode command, which will be
executed after all of the
.I .exrc
files but before interactive editing begins.
.nH 3 "SHELL, COMSPEC"
.LP
You can use
.cW COMSPEC
in MS-DOS, or
.cW SHELL
in any other system,
to specify which shell should be used for executing commands and expanding
wildcards.
.nH 3 "HOME"
.LP
This variable should give the full path name of your home directory.
.I Elvis
needs to know the name of your home directory so
it can locate the
.I .exrc
file there.
.\" We don't need all this ....
.\".nH 2 "VERSIONS"
.\".LP
.\".I Elvis
.\"currently works under BSD
.\".UX ,
.\"AT&T System-V
.\".UX ,
.\"SCO XENIX, Minix, Coherent, MS-DOS, Atari TOS, and OS9/68k.
.\"This section of the manual provides special information that applies to
.\"each particular version of
.\".I elvis .
.\".LP
.\"For all versions except MS-DOS, the file ``Makefile.mix'' should
.\"be copied to ``Makefile'', and then edited to select the correct set
.\"of options for your system.
.\"There is more information about this embedded in the file itself.
.\".nH 3 "BSD UNIX"
.\".LP
.\"Temporary files are stored in
.\".I /tmp .
.\".LP
.\".I Elvis
.\"does not have an
.\".I expreserve
.\"program yet.
.\"Instead, you should modify /etc/rc so that the temp files are not deleted when
.\"the system is rebooted.
.\"Find a line in /etc/rc which reads
.\".sC
.\"rm -rf /tmp/*
.\".eC
.\"or something like that, and change it to read
.\".sC
.\"rm -rf /tmp/[^e]* /tmp/e[^l]* /tmp/el[^v]* /tmp/elv_*
.\".eC
.\"If you do not have permission to modify
.\".I /etc/rc ,
.\"then it would be unsafe for you to have
.\".I elvis
.\"store any temp files in
.\".I /tmp .
.\"In this case, it is suggested that you make a ``tmp'' directory in your home
.\"directory and add ``set directory=/your/home/directory/tmp'' to your
.\".I .exrc
.\"file or
.\".cW EXINIT
.\"variable.
.\".LP
.\"Both
.\".I elvis
.\"and the real
.\".I vi
.\"read initialization commands from a
.\"file called
.\".I .exrc ,
.\"but the commands in that file might work on one but not the other.
.\"For example,
.\".sC
.\"set keywordprg=/usr/myself/bin/ref
.\".eC
.\"will work for
.\".I elvis ,
.\"but
.\".I vi
.\"will complain because it does not have a
.\".I keywordprg
.\"option.
.\"If the warning messages annoy you, then you can edit the config.h file to
.\"change the name of the initialization file
.\".I .exrc
.\"to something else, such as
.\".I .elvisrc .
.\".LP
.\"If you use X windows, you may wish to add
.\".cW \-DCS_LATIN1
.\"to CFLAGS.
.\"This will cause the digraph table and the flipcase option
.\"to have default values that are appropriate for the LATIN\-1
.\"character set.
.\"That is the standard character set for X.
.\".nH 3 "System-V UNIX"
.\".LP
.\"If your system uses terminfo instead of termcap, then you will
.\"have to edit the
.\".cW LIBS
.\"setting in the
.\".I Makefile .
.\"Currently it says
.\".cW "LIBS=\-ltermcap" ,
.\"but you may have to change it to
.\".cW "LIBS=\-lterminfo"
.\"or
.\".cW "LIBS=\-lterm"
.\"or something like that.
.\".LP
.\"The
.\".I /etc/rc
.\"file should be modified, as described for BSD
.\"systems above.
.\"The potential trouble with
.\".I .exrc
.\"described above for BSD
.\".UX
.\"applies to System-V
.\".UX
.\"as well.
.\".LP
.\".I Elvis
.\"uses CTRL\-C as the interrupt key, not Delete.
.\".nH 3 "SCO Xenix"
.\".LP
.\"For Xenix-386, you can use the generic System-V settings.
.\"You may wish to add
.\".cW \-DCS_IBMPC
.\"to CFLAGS, to have the digraph table
.\"and flipcase option start up in a mode that is appropriate for the console.
.\"There is a separate group of settings for use with Xenix-286.
.\"It already has
.\".cW \-DCS_IBMPC
.\"in CFLAGS.
.\".LP
.\"Because Xenix is so similar to System-V, everything said
.\"earlier about System-V applies to the Xenix version too.
.\".nH 3 "MINIX"
.\".LP
.\"There are separate settings in Makefile.mix for MINIX-PC and
.\"MINIX-ST.
.\"The differences between these two are that the ST
.\"version uses ``.o'' for the object file extension where the PC
.\"version uses ``.s'', and the PC version has some extra flags in
.\"CFLAGS to reduce the size of
.\".I elvis .
.\"The PC version also uses tinytcap (instead of the full termcap) to make it smaller.
.\".LP
.\"MINIX-PC users should read the CFLAGS section of this manual
.\"very carefully.
.\".LP
.\"The temporary files are stored in
.\".I /usr/tmp .
.\"The
.\".I /usr/tmp
.\"directory must exist before you run
.\".I elvis ,
.\"and it must be
.\"readable/writable by everybody.
.\"We use
.\".I /usr/tmp
.\"instead of
.\".I /tmp
.\"because after a system crash or power failure, you can recover the
.\"altered version of a file from the temporary file in
.\".I /usr/tmp .
.\"If it was stored in
.\".I /tmp ,
.\"though, then it would be lost because
.\".I /tmp
.\"is probably located on the RAM disk.
.\".LP
.\".I Elvis
.\"uses CTRL\-C as the interrupt key, not Delete.
.\".nH 3 "Coherent"
.\".LP
.\".I Elvis
.\"was ported to Coherent by Esa Ahola.
.\".LP
.\".I Elvis
.\"is too large to run under Coherent unless you eliminate
.\"some features via the CFLAGS setting.
.\"The recommended settings, in Makefile.mix,
.\"produce a working version of
.\".I elvis
.\"which emulates
.\".I vi
.\"faithfully,
.\"but lacks most of the extensions.
.\"You should read the CFLAGS section of this manual carefully.
.\".LP
.\"You can probably reduce the size of
.\".I elvis
.\"by using tinytcap.c
.\"instead of \-lterm.
.\"This would allow you to keep most features of
.\".I elvis ,
.\"at the expense of terminal independence.
.\"(Tinytcap.c has ANSI escape sequences hard-coded into it.)
.\".LP
.\"The temporary files are stored in /tmp.
.\"You should modify your
.\"/etc/rc file as described for BSD earlier.
.\".nH 3 "MS-DOS"
.\".LP
.\".I Elvis
.\"was ported to MS-DOS by Guntram Blohm and Martin Patzel.
.\".LP
.\"There are two different Makefiles for
.\".I elvis
.\"under MS-DOS.
.\"``Elvis.prj'' should be used with Turbo-C, and ``Elvis.mak'' should be
.\"used with MSC and Microsoft MAKE.
.\".I Elvis
.\"has been tested more
.\"thoroughly with MSC, so if you have a choice, use MSC.
.\".LP
.\".I Elvis
.\"stores its temporary files in C:\e\^tmp.
.\"If this is not satisfactory, then you should edit the CFLAGS line of your
.\".I Makefile
.\"to change
.\".cW TMPDIR
.\"to something else before compiling.
.\"You can also control the name of the temp directory via an environment variable
.\"named
.\".cW TMP
.\"or
.\".cW TEMP .
.\"The directory must exist before you can run
.\".I elvis .
.\".LP
.\"Normally, the
.\".cW TERM
.\"environment variable should not be set, or
.\"else it should be set to ``pcbios''.
.\"This way,
.\".I elvis
.\"will make calls
.\"to BIOS to update the screen.
.\"(If you do not like the colors that
.\"the BIOS interface uses, then edit the attr[] table in
.\".I pc.c. )
.\".LP
.\"You may prefer to use a device driver such as ANSI.SYS or
.\"NNANSI.SYS, for speed; or you may need to use a device driver for
.\"compatibility.
.\"If so, you should install one of these drivers by
.\"adding ``driver = ansi.sys'' to your CONFIG.SYS file, and then define
.\".cW TERM
.\"to be either ``ansi'' or ``nansi'' by adding a line such as ``set
.\".cW TERM =ansi''
.\"to your AUTOEXEC.BAT file.
.\"You must then reboot for these changes to take effect.
.\"After that,
.\".I elvis
.\"will notice the
.\".cW TERM
.\"setting and use the driver.
.\".LP
.\"Under MS-DOS,
.\".I elvis
.\"has an extra ``:set'' option called ``pcbios''
.\"which indicates whether the BIOS is being used directly.
.\"This is a ``read only'' option;
.\"you cannot use it to switch your interface style
.\"in the middle of an edit session.
.\".LP
.\"An extra program, called ``wildcard'', is needed for MS-DOS.
.\"It expands wildcard characters in file names.
.\".nH 3 "Atari TOS"
.\".LP
.\".I Elvis
.\"was ported to Atari TOS by Guntram Blohm and Martin Patzel.
.\"It is very similar to the MS-DOS version.
.\"It has only been tested with the Mark Williams C compiler.
.\".LP
.\"The
.\".cW TERM
.\"environment variable is ignored; the ST port always
.\"assumes that
.\".cW TERM =vt52.
.\"The
.\".cW SHELL
.\"(not
.\".cW COMSPEC !)
.\"variable should be set to the name of a line-oriented
.\"shell.
.\".LP
.\"A simple shell in included with
.\".I elvis .
.\"Its source is in ``shell.c'', and the name of the executable is ``shell.ttp''.
.\"This was necessary because the standard Atari software does not offer any way
.\"to set environment variables.
.\"The file ``profile.sh'' should contain a set of instructions to be executed
.\"when the shell first starts up.
.\"An example of this file is included, but you will almost
.\"certainly want to edit it right away to match your configuration.
.\".LP
.\"If you already have a command-line shell, then you'll probably
.\"want to continue using it.
.\"The shell that comes with
.\".I elvis
.\"is very limited.
.\".LP
.\"The ``alias'' program does not work under TOS yet, so the aliases
.\"for
.\".I elvis
.\"(\fIex\fP,
.\".I vi ,
.\".I view ,
.\"and
.\".I input )
.\"are not available.
.\".LP
.\"Currently, character attributes cannot be displayed on the
.\"screen.
.\"In other words, the ``charattr'' option does not work very
.\"well.
.\"It is ironic \(em the only system that always has a bitmapped
.\"display is the only system that does not support multiple fonts!
.\".nH 3 "OS9/68k"
.\".LP
.\".I Elvis
.\"was ported to OS9/68k by Peter Reinig.
.\".LP
.\"The Makefile is currently configured to install
.\".I elvis
.\"and the
.\"related programs in
.\".I /dd/usr/cmds .
.\"If this is unacceptable, then
.\"you should change the BIN setting to some other directory.
.\"Similarly, it expects the source code to reside in
.\".I /dd/usr/src/elvis ;
.\"the
.\".cW ODIR
.\"setting is used to control this.
.\".LP
.\"Temporary files are stored in the
.\".I /dd/tmp
.\"directory.
.\"Your
.\".I /dd/startup
.\"file may need to be modified to prevent it from
.\"deleting
.\".I elvis '
.\"temporary files.
.\".LP
.\"The program in
.\".I alias.c
.\"is linked repeatedly to produce the
.\".I vi ,
.\".I view ,
.\"and
.\".I input
.\"aliases for
.\".I elvis .
.\"Sadly, the
.\".I ex
.\"alias is impossible to implement under OS9, because the shell has a built-in
.\"command by that name.
.\".LP
.\"For some purposes, you must give
.\".I make
.\"the
.\".B \-b
.\"option.
.\"Specifically, you need this for
.\".sC
.\"make -b clean
.\".eC
.\"and
.\".sC
.\"make -b install
.\".eC
