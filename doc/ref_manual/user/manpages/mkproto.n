.\"	@(#)mkproto.n	1.4	96/02/16 11:05:12
.aU
	Software: Eric R. Smith
	Document: Eric R. Smith
	Modified: Gregory J. Sharp, Nov 1995
.aE
.mT "mkproto" U
make STD C function prototypes for a C source file
.SH
Synopsis
.LP
.sC L
mkproto [-n] [-s] [-p] [file] ...
.eC
.SH
Description
.LP
.kW "\fImakeproto\fP"
.kW "STD C"
.kW "function prototypes"
.I Mkproto
takes as input one or more C source code files,
and produces as output (on the standard output stream) a list of function
prototypes (a la STD C) for the external functions defined in the
given source files.
This output,
redirected to a file,
is suitable for #including in a C source file.
.LP
The function definitions in the original source may be either ``old-style''
(in which case appropriate prototypes are generated for the functions) or
``new-style'' (in which the definition includes a prototype already).
.mH
Options
.LP
.IP \fB\-n\fP
causes the line number where each function was defined
to be prepended to the prototype declaration as a comment.
.IP \fB\-s\fP
causes prototypes to be generated for functions declared ``static'' as
well as extern functions.
.IP \fB\-p\fP
causes the prototypes emitted to be only readable by STD compilers.
Normally, the prototypes are ``macro-ized'' so that compilers with __STDC__
not defined do not see them.
.LP
If files are specified on the command line,
then a comment specifying the file of origin is emitted before the prototypes
constructed from that file.
If no files are given,
then no comments are emitted and the C source code is taken from the standard
input stream.
.mH
Warnings
.LP
.I Mkproto
is easily confused by complicated declarations,
such as
.sC
int (*signal())() { ...
.eC
or
.sC
struct foo { int x, y; } foofunc() { ...
.eC
.LP
Float types are not properly promoted in old style definitions,
that is,
.sC
int test(f) float f; { ...
.eC
should (because of the default type conversion rules) have prototype
.sC
int test(double f);
.eC
rather than the incorrect
.sC
int test(float f);
.eC
generated by
.I mkproto .
.LP
Some programs may need to be run through the preprocessor before
being run through
.I mkproto .
The
.B \-n
option is unlikely to work as desired on the output of a preprocessor.
.LP
Typedef'd types are not correctly promoted.
For example, for
.sC
typedef schar char; int foo(x) schar x;...
.eC
.I mkproto
incorrectly generates the prototype
.sC
int foo(schar x)
.eC
rather than
the (correct)
.sC
int foo(int x)
.eC
.LP
Functions named ``inline'' with no explicit type qualifiers are not recognized.
.LP
Note
.LP
There is no warranty for this program (as noted above,
it is guaranteed to break sometimes anyway).
.SH
Example
.LP
.sC
mkproto fred.c > fred.pro
.eC
will produce the file
.I fred.pro
which contains the STD C prototypes for all the externally visible
functions defined in
.I fred.c .
.SH
See Also
.LP
cc(U),
makeproto(U).
