.\"	@(#)ksh.n	1.8	96/02/16 11:02:10
.\"
.\" Copyright 1995 Vrije Universiteit, The Netherlands.
.\" For full copyright and restrictions on use see the file COPYRIGHT in the
.\" top level of the Amoeba distribution.
.\"
.aU
	Software: Eric Gisin, based on public domain Minix shell
	Document: Eric Gisin
	Modified: Kees Verstoep, 7/2/91 - made suitable for Amoeba
		  Gregory J. Sharp, Nov 1995
.aE
.\" Based on the public domain 7th edition Bourne shell.
.\" System V and Korn modifications by Eric Gisin,
.\" with contributions by
.\" Ron Natalie, Arnold Robbins, Doug Gwyn, Erik Baalbergen, AT&T (getopt(3)).
.nr OJ 0 \" No Job Control
.nr OE 1 \" Command Editing
.nr OB 0 \" No BSD enhanced ulimit options
.nr NU 0 \" No ulimit at all
.ds OK [\|
.ds CK \|]
.mT "ksh" U
the Korn Shell (Public Domain)
.SH
Synopsis
.LP
.sC L
ksh [-st] [-c command] [file [argument ...]]
.eC
.SH
Description
.LP
.kW shell
The Korn Shell is an alternative command shell.
It is Bourne Shell compatible (so shell scripts are portable),
and its main feature is the ability to edit the command line
(including command and filename completion and history editing).
.LP
Characteristics common to the Bourne and Korn Shell are only discussed briefly.
Specific features of the Korn shell are described in more detail.
Only a subset of the Korn shell features is currently implemented.
.mH
Command syntax
.LP
The `#' character begins a one-line comment,
unless the `#' occurs inside a word.
The tokens `;', `|', `&', `;;', `||', `&&', `(', and `)'
stand by themselves.
A \fIword\fP is a sequence of any other non-white space characters,
which may also contain quoted strings
(quote characters are `\'', `"', `\`',
or a matching `${ }' or `$( )' pair).
A \fIname\fP is an unquoted word made up of letters,
digits,
or `_'.
Any number of white space characters (space and tab)
may separate words and tokens.
.LP
In the following syntax,
`{ ... }?' indicates an optional thing,
`{ ... }*' indicates zero or more repetitions,
`{ ... | ... }' indicates alternatives.
Finally,
`\fIchar\fP' is used when character \fIchar\fP is meant literally.
Keywords are written in bold format.
.de S
.br
\\$1
.br
..
.IP \fIstatement:\fP
.S "`(' \fIlist\fP `)'"
.S "`{' \fIlist\fP `;' `}'"
.S "\fBfor\fP \fIname\fP { \fBin\fP { \fIword\fP }* }? \fBdo\fP \fIlist\fP `;' \fBdone\fP"
.S "{ \fBwhile\fP | \fBuntil\fP } \fIlist\fP `;' \fBdo\fP \fIlist\fP `;' \fBdone\fP"
.S "\fBif\fP \fIlist\fP `;' \fBthen\fP \fIlist\fP `;' { \fBelif\fP \fIlist\fP `;' \fBthen\fP \fIlist\fP `;' }* { \fBelse\fP \fIlist\fP `;' }?\fBfi\fP"
.S "\fBcase\fP \fIname\fP \fBin\fP { \fIword\fP { `|' \fIword\fP }* `)' \fIlist\fP `;;' }* \fBesac\fP"
.S "\fBfunction\fP \fIname\fP `{' \fIlist\fP `;' `}'"
.S "\fIname\fP `()' `{' \fIlist\fP `;' `}'"
.S "\fBtime\fP \fIpipe\fP"
Redirection may occur at the beginning or end of a statement.
.IP \fIcommand:\fP
.S "{ \fIname\fP`='\fIword\fP }* { \fIword\fP }*"
This creates a temporary assignment to variable \fIname\fP,
during the executing the second part.
Redirection may occur anywhere in a command.
.IP \fIlist:\fP
.S "\fIcond\fP"
.S "\fIcond\fP `;' \fIlist\fP"
.S "\fIcond\fP `&' \fIlist\fP"
.IP \fIcond:\fP
.S \fIpipe\fP
.S "\fIpipe\fP `&&' \fIcond\fP"
.S "\fIpipe\fP `||' \fIcond\fP"
.IP \fIpipe:\fP
.S "\fIstatement\fP { `|' \fIstatement\fP }*"
.mH
Alias expansion
.LP
Alias expansion occurs when the first word of a statement is a defined alias,
except when that alias is already being expanded.
It also occurs after the expansion of an alias
whose definition ends with a space.
.mH
Shell variables
.LP
The following standard special variables exist:
`!', `#', `$', `-', `?'.
.IP "_" 14
In interactive use this parameter is set to the last word of
the previous command.  When a command is executed this parameter
is set to the full path of the command and placed in the environment
for the command.  See also MAILPATH.
.IP CDPATH
The search path for the \fIcd\fP command.
.IP ENV
If this variable is set at start-up
(after any profile files are executed),
the expanded value is used as shell start-up file.
It typically contains function and alias definitions.
.IP FCEDIT
The editor used by the \fIfc\fP command.
.IP IFS
\fIInternal field separator\fP,
used during substitution and the \fIread\fP command.
.IP HOME
The default directory for the \fIcd\fP command.
.IP MAIL
If set, the user will be informed of the arrival of mail
in the named file.  This variable is ignored if
the MAILPATH variable is set.
.IP MAILCHECK
How often, in seconds, the shell will check for mail in the
file(s) specified by MAIL or MAILPATH.  If 0,
the shell checks before each prompt.  The default is 600
seconds.
.IP MAILPATH
A list of files to be checked for mail.  The list is colon
separated, and each file may be followed by a \fB?\fP and
a message to be printed if new mail has arrived.  Command
and parameter substitution is performed on the message, and
the parameter \fB$_\fP is set to the name of the file.
The default message is ``you have mail in $_''.
.IP PATH
The search path for executable commands and \fB.\fP'd files.
.IP PPID
The process number of the parent of the shell.
.IP "PS1"
.IP "PS2"
PS1 is the primary prompt for interactive shells.
Dollar substitution is performed,
and variable `!' is replaced with the command number (see \fIfc\fP).
The prompt $PS2 is printed when a statement is not yet complete,
after having typed return.
.IP "PWD"
.IP "OLDPWD"
.br
The current and previous working directories.
.IP RANDOM
A random integer.  The random number generator may be seeded
by assigning an integer value to this variable.
.IP SECONDS
The number of seconds since the shell timer was started or
reset.  Assigning an integer value to this variable resets
the timer.
.mH
Substitution
.LP
In addition to the System V.2 substitutions,
the following are available.
.IP "$(command)" 12
Like \(gacommand\(ga, but no escapes are recognized.
.IP "$(<file)"
Equivalent to $(cat file), but without forking.
.IP "${#var}"
The length of the string value of \fIvar\fP,
or the number of arguments if \fIvar\fP is \fB*\fP or \fB@\fP.
.IP "${var#pattern}"
.IP "${var##pattern}"
.br
If \fIpattern\fP matches the beginning of the value of \fIvar\fP,
the matched text is deleted from the result of substitution.
A single \fB#\fP results in the shortest match,
two \fB#\fP's results in the longest match.
.IP "${var%pattern}"
.IP "${var%%pattern}"
.br
Like \fB#\fP substitution, but deleting from the end of the value.
.mH
Expressions
.LP
Expressions can be used with the \fIlet\fP command,
as numeric arguments to the \fItest\fP command,
and as the value of an assignment to an integer variable.
.LP
Expression may contain alpha-numeric variable identifiers and integer constants
and may be combined with the following operators:
== != <= < > >= + - * / % ! ( )
.mH
Command execution
.LP
After evaluation of keyword assignments and arguments,
the type of command is determined.
A command may execute a shell function, a shell built-in,
or an executable file.
.LP
Any keyword assignments are then performed according to the type of command.
In function calls assignments are local to the function.
Assignments in built-in commands marked with a \(dg persist,
otherwise they are temporary.
Assignments in executable commands are exported to the sub-process
executing the command.
.LP
There are several built-in commands.
.IP ":" 10
Only expansion and assignment are performed.
This is the default if a command has no arguments.
.IP ". \fIfile\fP"
Execute the commands in \fIfile\fP without forking.
The file is searched in the directories of $PATH.
Passing arguments is not implemented.
.IP "alias [\fIname\fB=\fIvalue\fP \fR...]"
.br
Without arguments,
\fIalias\fP lists all aliases and their values.
For any name without a value,
its value is listed.
Any name with a value defines an alias,
see "Alias Expansion" above.
Korn's tracked aliases are not implemented,
but System V command hashing is (see "hash").
.IP "alias -d [\fIname\fB=\fIvalue\fI ...]\fR"
.br
Directory aliases for tilde expansion, e.g.
.sC
alias -d fac=/usr/local/usr/facilities
cd ~fac/bin
.eC
.IP "break [\fIlevels\fP]"
.IP "builtin \fIcommand arg ...\fP"
.br
\fICommand\fP is executed as a built-in command.
.IP "cd [\fIpath\fP]"
Set the working directory to \fIpath\fP.  If the variable
CDPATH is set, it lists the search path for the directory
containing \fIpath\fP.  A null path means the current directory.
If \fIpath\fP is missing, the home directory ($HOME) is used.
If \fIpath\fP is \fB\-\fP, the previous working directory is used.
If \fIpath\fP is \fB..\fP, the shell changes directory to the
parent directory, as determined from the value of PWD.
The PWD and OLDPWD variables are reset.
The System V two argument form is not implemented.
.IP "cd \fIold new\fP"
The string \fInew\fP is substituted for \fIold\fP in the current
directory, and the shell attempts to change to the new directory.
.IP "continue [\fIlevels\fP]"
.IP "echo ..."
\fIEcho\fP is replaced with the alias echo='print' in the Korn shell.
.IP "eval \fIcommand ...\fP"
.IP "exec \fIcommand arg ...\fP"
.br
The executable command is executed without forking.
If no arguments are given,
any I/\|O redirection is permanent.
.IP "exit [\fIstatus\fP]"
.br
.IP "fc [\fB\-e\fP \fIeditor\fP] [\fB\-lnr\fP] [\fIfirst\fP [\fIlast\fP]]"
.br
A simple subset of Korn's ``fix command''.
\fIFirst\fP and \fIlast\fP select commands.
Commands can be selected by history number,
or a string specifying the most recent command starting with that string.
The \fB\-l\fP option lists the command on stdout,
and \fB\-n\fP inhibits the default command numbers.
The \fB\-r\fP option reverses the order of the list.
Without \fB\-l\fP,  the selected commands can be edited by
the editor specified with the \fB\-e\fP option, or if no \fB\-e\fP
is specified,
the \fB$FCEDIT\fP editor,  then executed by the shell.
.IP "fc \fB\-e \-\fP [\fB\-g\fP] [\fIold\fB=\fInew\fR] [\fIcommand\fP]"
.br
Re-execute the selected command (the previous command by default)
after performing the optional substitution of \fIold\fP with \fInew\fP.
If \fB\-g\fP is specified, all occurrences of \fIold\fP are
replaced with \fInew\fP.
This command is usually accessed with the predefined alias
r=``fc \-e \-''.
.IP "getopts \fIoptstring\fP \fIname\fP [\fIarg\fP ...]"
.br
Used for option handling in shell procedures.
This command is described in a separate section.
.IP "hash [\fB\-r\fP] [\fIname ...\fP]"
.br
Without arguments,
any hashed executable command path names are listed.
The \fB\-r\fP flag causes all hashed commands to be removed.
Each \fIname\fP is searched as if it were a command name
and added to the hash table if it is an executable command.
.IP "jobs"
Display information about the controlled jobs.
The job number is given preceded by a percent sign,
followed by a plus sign if it is the ``current job'',
or by a minus sign if it is the ``previous job'',
then the process group number for the job,
then the command.
.IP "kill [\fB\-\fIsignal\fR] \fIprocess\fP ..."
.br
Send a signal (TERM by default) to the named process.
The signal may be specified as a number or a mnemonic from <signal.h>
with the SIG prefix removed.
.IP "let [\fIexpression ...\fP]"
.br
Each expression is evaluated, see "Expressions" above.
A zero status is returned if the last expression evaluates
to a non-zero value, otherwise a non-zero status is returned.
Since may expressions need to be quoted, \fI(( expr ))\fP is
syntactic sugar for \fIlet "expr"\fP.
.IP "print [\fB\-nre\fP] [\fB\-u\fIn\fR] [\fIargument ...\fP]"
.br
\fIPrint\fP prints its arguments on the standard output,
separated by spaces, and terminated with a newline.
The \fB\-n\fP option eliminates the newline.
.IP
By default,
certain C escapes are translated.
These include \eb, \ef, \en, \er, \et, \ev, and \e\fIooo\fP
(\fIo\fP is an octal digit).
\ec is equivalent to the \fB\-n\fP option.
This expansion may be inhibited with the \fB\-r\fP option,
and may be re-enabled with the addition of the \fB\-e\fP option.
.br
The \fB\-u\fP option can be used to let the results be written on
the file descriptor specified (e.g.,
``\*<print -u2\*>'' writes on stderr).
.IP "read [\fB\-r\fP] [\fB\-u\fIn\fR] \fIname ...\fP"
.br
Read the value of variables specified from standard input.
The \fB\-u\fP option can be used to specify a different file descriptor.
The first variable name may be of the form \fIname\fB?\fIprompt\fR.
.IP "readonly [\fIname ...\fP]"
.br
Make the variables specified read-only, i.e.,
future assignments to them will be refused.
.IP "return [\fIstatus\fP]"
.br
Used to return from a user defined function,
with \fIstatus\fP specifying the return value (default 0).
.de O
.br
\t\\$1\ \\$2\t\\$3
..
.IP "set [\fB\(+-\fP[\fIa-z\fP]]"
.br
Set (\fB\-\fP) or clear (\fB+\fP) a shell option:
.ta 5n 20n 30n 40n
.O \-a allexport "all new variable are created with export attribute"
.O \-e errexit "exit on non-zero status"	\" [incorrect]
.O \-k keyword "variable assignments are recognized anywhere in command"
.O \-n noexec "compile input but do not execute (ignored if interactive)"
.O \-f noglob "do not expand filenames"
.O \-u nounset "dollar expansion of unset variables is an error"
.O \-v verbose "echo shell commands on stdout when compiling"
.O \-h trackall "add command path names to hash table"
.O \-x xtrace "echo simple commands while executing"
.if \n(OJ \{
.O \-m monitor "job control enabled (default for interactive shell)"\}
.IP "set [\fB\(+-o\fP \fIkeyword\fP] ..."
.br
Set (\fB\-\fP) or clear (\fB+\fP) shell option \fIkeyword\fP:
.de O
.br
\t\\$1\t\\$2
..
.if \n(OE \{
.ta 5n 15n 30n 40n
.O emacs "emacs-like line editing"\}
.O ignoreeof "shell will not exit of EOF,  must use \fIexit\fP"
.\" .O markdirs "[not implemented]"
.\" .O bgnice "background jobs are run with lower priority"
.O vi "VI-like line editing"
.IP "set [\fB\-\-\fP] \fIarg ...\fP"
.br
Set shell arguments.
.IP "shift [\fInumber\fP]"
.IP "test \fIexpression\fP"
.br
The \fItest\fP command has been integrated into the shell,
for efficiency.
\fITest\f evaluates the \fIexpression\fP and returns zero status if true,
and non-zero status otherwise.
It is normally used as the controlling command of the
\fIif\fP and \fIwhile\fP statements.
See test(U) for a complete description.
.IP "times"
.IP "trap [\fIhandler\fP] [\fIsignal ...\fP]"
.IP "typeset [\fB\(+-irtx\fP] [\fIname\fP[\fB=\fIvalue\fR] ...]"
.br
If no arguments are given, lists all variables and their attributes.
.br
If options but no names are given, lists variables with specified
attributes.
Their values are listed also, unless ``+'' is used.
.br
If names are given, set the attributes of the named variables.
Variables may also be assigned a value.
If used inside a function,
the created variable are local to the function.
.br
The attributes are as follows:
.br
.ta 5n 10n
.O -i "The variable's value is stored as an integer."
.O -x "The variable is exported to the environment."
.O -r "The variable is read-only cannot be reassigned a value."
.O -f "List functions instead of variable."
.\" .O -t "Trace (not implemented)."
.if \n(NU \{
.IP "ulimit [\fB\-f\fP] [\fIvalue\fP]"
.ds OZ <OZ>
.IP "ulimit \*(OK \fB\-\*(OZ\fP \*(CK \*(OK \fIn\fP \*(CK"
.RS
.TP "\w'\fB\-\-\ \ \ 'u"
.if \n(OB \{.B \-c
. Impose a size limit of
.I n\^
blocks on the size of core dumps.
.TP
.B \-d
Impose a size limit of
.I n\^
blocks on the size of the data area.\}
.TP
.B \-f
Impose a size limit of
.I n
blocks on files written by the shell
and its child processes (files of any size may be read).
\n(OB \{.TP
.B \-m
Impose a soft limit of
.I n\^
blocks on the size of physical memory.
.TP
.B \-t
Impose a time limit of
.I n\^
seconds to be used by each process.\}
.LP
If no option is given,
.B \-f
is assumed.
If
.I n
is omitted,
the current limit is printed.
As far as
.B ulimit
is concerned, a ``block'' is 512 bytes.
.LP
You may lower your own resource limit,
but only a super-user (see
.IR su (1M))
can raise a limit.
.RE
\} \" end of NU (no ulimit)
.IP "umask [\fIvalue\fP]"
.IP "unalias \fIname ...\fP"
.br
The aliases for the given names are removed.
.IP "unset [\fB\-f\fP] \fIname ...\fP"
.IP "wait [\fIprocess-id\fP]"
.br
If \fIprocess-id\fP is given,
wait for the specified process to finish.
Otherwise wait for any process to finish.
.IP "whence [\fB\-v\fP] name ..."
.br
For each name,
the type of command is listed.
The \fB\-v\fP flag causes function and alias values to be listed.
.mH
Shell script option handling
.LP
The built-in command
.I getopts
can be used by shell procedures
to parse positional parameters and to check for legal options.
It supports all applicable rules of the command syntax standard.
The syntax is ``getopts \fIoptstring\fP \fIname\fR [\fIarg\fR ...]''
.LP
.I Optstring
must contain the option letters the command using
.I getopts
will recognize;
if a letter is followed by a colon,
the option is expected to have an argument
which should be separated from it by white space.
.LP
Each time it is invoked,
.I getopts
will place the next option in the shell variable
.I name
and the index of the next argument to be processed in the shell variable
\s-1OPTIND\s0.
Whenever the shell or a shell procedure is invoked,
\s-1OPTIND\s0 is initialized to 1.
.LP
When an option requires an option-argument,
.I getopts
places it in the shell variable
\s-1OPTARG\s0.
.P
If an illegal option is encountered,
.B ?\&
will be placed in
.I name .
.P
When the end of the options is encountered,
.I getopts
exits with a non-zero exit status.
The special option
.RB `` \-\- ''
may be used to delimit the end of the options.
.P
By default,
.I getopts
parses the positional parameters.
If extra arguments
.RI ( arg
\&...) are given on the
.I getopts
command line,
.I getopts
will parse them instead.
.LP
The following fragment of a shell program shows how one might process
the arguments for a command that can take the options
.B a
or
.B b ,
as well as the option
.B o ,
which requires an option-argument:
.LP
.sC
while getopts abo: c
do
	case $c in
	a\(bvb)	FLAGS=$FLAGS$c;;
	o)	OARG=$OPTARG;;
	\e?)	echo $USAGE 1>&2
		exit 2;;
	esac
done
shift OPTIND\-1
.eC
.LP
This code will accept any of the following as equivalent:
.LP
.sC
cmd \-a \-b \-o "xxx z yy" file
cmd \-a \-b \-o "xxx z yy" \-\- file
cmd \-ab \-o "xxx z yy" file
cmd \-ab \-o "xxx z yy" \-\- file
.eC
.if \n(OJ \{.mH
Job Control
.LP
Job control features are enabled by the
\fB\-m\fP or \fB\-o monitor\fP flags.
When job control is enabled, and the system supports job control,
background commands and foreground commands that have been stopped
(usually by a
.SM SIGTSTP
signal generated by typing
.I ^Z\^ )
are placed into separate individual
.I "process groups" .
The following commands are used to manipulate these process groups:
.LP
.PD 0
.TP "\w'\fBkill\fP \*(OK \fIjob\fP \*(CK\ \ \ 'u"
\fBkill\fP [\fB\-\fIsignal\fR] \fIjob\fP ...
Send a signal (TERM by default) to the named job process group.
.TP
\fBfg\fP \*(OK \fIjob\fP \*(CK
Resume the stopped foreground job in the foreground.
If the process group
.I n
is not specified then the ``current job'' is resumed.
.TP
\fBbg\fP \*(OK \fIjob\fP \*(CK
Resume the stopped foreground job in the background.
If the process group
.I n
is not specified then the ``current job'' is resumed.
.PD
.LP
The \fBfg\fP, \fBbg\fP, \fBkill\fP, and \fBwait\fP commands
may refer to jobs with the following ``percent'' sequences.
The percent sign is optional with the fg and bg commands.
.LP
.PD 0
.TP "\w'\fBbg\fP \*(OK \fIn\fP \*(CK\ \ \ 'u"
.B %+ ( %\- )
If there is a ``current job'' (``previous job''),
then that job is selected.
.TP
.BI % n
If the specified job number is one of the known jobs,
then that job is selected.
.TP
.BI % string
If the string matches the initial part of a job's command,
then that job is selected.
.TP
.BI %? string
As above, but the string may match any portion of the command.
.sp
.PP
If the system does not support job control, monitor mode enables
job reporting.
The jobs and kill commands functions as above,
and you will be informed when background jobs complete.
Fg and bg are not available.
.PD\}
.br
.if \n(OE \{.mH
Interactive Input Line Editing
.LP
When the
.I emacs
option is set,
interactive input line editing is enabled.
This mode is slightly different from the emacs mode in AT&T's KornShell.
In this mode various
.I "editing commands"
(typically bound to one or more control characters)
cause immediate actions without waiting for a new-line.
Several editing commands are bound to particular control characters
when the shell is invoked;
these bindings can be changed using the following commands:
.br
.LP
.IP bind 12
The current bindings are listed.
.IP "bind \fIstring\fP=\fIediting-command\fP
.br
The specified editing command is bound to the given
.I string ,
which should consist of a control character
(which may be written using ``caret notation'' \fB^\fP\fIx\fP\|),
optionally preceded by one of the two prefix characters.
Future input of the
.I string
will cause the editing command to be immediately invoked.
.br
Note that although only two prefix characters (normal ESC and ^X)
are supported, some multi-character sequences can be supported:
.br
bind '^[['=prefix-2
.br
bind '^XA'=up-history
.br
bind '^XB'=down-history
.br
bind '^XC'=forward-char
.br
bind '^XC'=backward-char
.br
will bind the arrow keys on an ANSI terminal.  Of course some escape
sequences will not work out quite that nicely.
.IP "bind -m \fIstring\fP=\fIsubstitute\fP
.br
The specified input
.I string
will afterwards be immediately replaced by the given
.I substitute
string,
which may contain editing commands.
.LP
The following editing commands are available;
first the command name is given followed by its default binding (if any)
using caret notation (note that the ASCII
.SM ESC
character is written as \s-1^[\s0\|),
then the editing function performed is described.
Note that editing command names are used only with the
.I bind
command.
Furthermore,
many editing commands are useful only on terminals with a visible cursor.
The default bindings were chosen to resemble corresponding EMACS key bindings.
The users tty characters (e.g. erase) are bound to reasonable
substitutes.
.br
.LP
.\" .PD 0
.\" .TP "\w'\fBdelete-word-backward\ \ ^W\fP\ \ \ 'u"
.IP "\fBabort\ \ ^G\fP" 14
Useful as a response to a request for a
.I search-history
pattern in order to abort the search.
.IP "\fBauto-insert\fP"
Simply causes the character to appear as literal input.
(Most ordinary characters are bound to this.)
.IP "\fBbackward-char\ \ ^B\fP"
.br
Moves the cursor backward one character.
.IP "\fBbackward-word\ \ ^[\|b\fP"
.br
Moves the cursor backward to the beginning of a word.
.IP "\fBbeginning-of-line\ \ ^A\fP"
.br
Moves the cursor to the beginning of the input line
(after the prompt string).
.IP "\fBcomplete\ \ ^[\|^[\fP"
Automatically completes as much as is unique of the hashed command name
or the file name containing the cursor.
If the entire remaining command or file name is unique
a space is printed after its completion,
unless it is a directory name in which case
.B /
is postpended.
If there is no hashed command or file name with the current partial word
as its prefix,
a bell character is output (usually causing a ``beep'').
.IP "\fBcomplete-command\ \ ^X^[\fP"
.br
Automatically completes as much as is unique of the hashed command name
having the partial word up to the cursor as its prefix,
as in the
.I complete
command described above.
Only command and function names seen since the last
.I "hash \-r"
command are available for completion;
the
.I "hash"
command may be used to register additional names.
.IP "\fBcomplete-file\ \ ^[\|^X\fP"
.br
Automatically completes as much as is unique of the file name
having the partial word up to the cursor as its prefix,
as in the
.I complete
command described above.
.IP "\fBcopy-last-arg\ \ ^[\|_\fP"
.br
The last word of the previous command is inserted at the
cursor.  Note I/O redirections do not count as words of
the command.
.br
.IP "\fBdelete-char-backward\ \ ERASE\fP"
.br
Deletes the character before the cursor.
.IP "\fBdelete-char-forward\ \ ^D\fP"
.br
Deletes the character after the cursor.
.IP "\fBdelete-word-backward\ \ ^[\|ERASE\fP"
.br
Deletes characters before the cursor back to the beginning of a word.
.IP "\fBdelete-word-forward\ \ ^[\|d\fP"
.br
Deletes characters after the cursor up to the end of a word.
.IP "\fBdown-history\ \ ^N\fP"
.br
Scrolls the history buffer forward one line (later).
Each input line originally starts just after
the last entry in the history buffer,
so
.I down-history
is not useful until either
.I search-history
or
.I up-history
has been performed.
.IP "\fBend-of-line\ \ ^E\fP"
Moves the cursor to the end of the input line.
.IP "\fBeot\ \ ^_\fP"
Acts as an end-of-file;
this is useful because edit-mode input
disables normal terminal input canonicalization.
.IP "\fBeot-or-delete\ \ ^D\fP"
.br
Acts as eot if alone on a line;
otherwise acts as delete-char-forward.
.br
.IP "\fBexchange-point-and-mark\ \ ^X\|^X\fP"
.br
Places the cursor where the mark is, and sets the
mark to where the cursor was.
.IP "\fBforward-char\ \ ^F\fP"
.br
Moves the cursor forward one position.
.IP "\fBforward-word\ \ ^[\|f\fP"
.br
Moves the cursor forward to the end of a word.
.IP "\fBkill-line\ \ KILL\fP"
Deletes the entire input line.
.IP "\fBkill-region\ \ ^W\fP"
Deletes the input between the cursor and the mark.
.IP "\fBkill-to-eol\ \ ^K\fP"
Deletes the input from the cursor to the end of the line.
.IP "\fBlist\ \ ^[\|?\fP"
Prints a sorted,
columnar list of hashed command names or file names
(if any) that can complete the partial word containing the cursor.
Directory names have
.B /
postpended to them,
and executable file names are followed by
.B \(** .
.IP "\fBlist-command\ \ ^X\|?\fP"
.br
Prints a sorted, columnar list of hashed command names
(if any) that can complete the partial word containing the cursor.
.IP "\fBlist-file\fP"
Prints a sorted, columnar list of file names
(if any) that can complete the partial word containing the cursor.
File type indicators are postpended as described under
.I list
above.
.IP "\fBnewline\ \ ^J\ \fP\fIand\^\fP\fB\ ^M\fP"
.br
Causes the current input line to be processed by the shell.
(The current cursor position may be anywhere on the line.)
.IP "\fBnewline-and-next\ \ ^O\fP"
.br
Causes the current input line to be processed by the shell, and
the next line from history becomes the current line.  This is
only useful after an up-history or search-history.
.IP "\fBno-op\ \ QUIT\fP"
Does nothing.
.IP "\fBprefix-1\ \ ^[\fP"
Introduces a 2-character command sequence.
.IP "\fBprefix-2\ \ ^X\fP"
Introduces a 2-character command sequence.
.IP "\fBquote\ \ ^^\fP"
The following character is taken literally
rather than as an editing command.
.IP "\fBredraw\ \ ^L\fP"
Reprints the prompt string and the current input line.
.IP "\fBsearch-character\ \ ^]\fP"
.br
Search forward in the current line for the next keyboard character.
.IP "\fBsearch-history\ \ ^R\fP"
.br
Enter incremental search mode.
The internal history list is searched backwards
for commands matching the input.
An initial ``^'' in the search string anchors the search.
The escape key will leave search mode.
Other commands will be executed after leaving search mode (unless
of course they are prefixed by escape, in which case they will
almost certainly do the wrong thing).
Successive
.I search-history
commands continue searching backward
to the next previous occurrence of the pattern.
The history buffer retains only a finite number of lines;
the oldest are discarded as necessary.
.IP "\fBset-mark-command\ \ ^]\|<space>\fP"
.br
Search forward in the current line for the next keyboard character.
.br
.ie \n(OX \{.IP "\fBstuff\ \ ^T\fP"\}
.el \{.IP "\fBstuff\fP"\}
On systems supporting it,
pushes the bound character back onto the terminal input
where it may receive special processing by the terminal handler.
.if \n(OX \{This is useful for the BRL
.B ^T
``mini-systat'' feature,
for example.\}
.IP "\fBstuff-reset\fP"
Acts like
.I stuff\^ ,
then aborts input the same as an interrupt.
.br
.ie \n(OX \{.IP \fBtranspose-chars\fP\}
.el \{.IP \fBtranspose-chars\ \ ^T\fP\}
.br
Exchanges the two characters on either side of the cursor, or
the two previous characters if the cursor is at end of line.
.IP "\fBup-history\ \ ^P\fP"
Scrolls the history buffer backward one line (earlier).
.IP "\fByank\ \ ^Y\fP"
Inserts the most recently killed text string at the current cursor position.
.IP "\fByank-pop\ \ ^[\|y\fP"
Immediately after a
.I yank ,
replaces the inserted text string with the
next previous killed text string.
\}
.SH
Files
.LP
/home/.profile	default startup file
.mH
Diagnostics
.LP
.I getopts
prints an error message on the standard error output
when it encounters an option letter not included in
.I optstring .
.mH
Warnings
.\" .LP
.\" Interactive shells will occasionally hang while waiting for a job
.\" in the BSD version.
.LP
The 8th bit is stripped in emacs mode.
.LP
Options with option-arguments must not be grouped with other options,
because this may not be supported anymore in a future release.
.LP
For the same reason,
there should be white space after an option that takes an option-argument.
.LP
Changing the value of the shell variable OPTIND
or parsing different sets of arguments may lead to unexpected results.
.LP
Quoting double-quote (") characters inside back-quote (\(ga) inside
double-quotes does not behave properly.
.\" .LP
.\" Job control on System V is not really job control.  In fact it is
.\" not much of anything.
.LP
The emacs mode can ``lose'' an stty command done by the user.
.LP
Unsetting special variables
may cause unexpected results.
.LP
Functions declared as having local scope really have global scope.
.LP
Here documents inside functions do not work correctly.
.LP
Exit on error (\fBset \-e\fP or \fBset -o errexit\fP) does not work
correctly.
.LP
Furthermore,
there are several differences with the AT&T version:
.LP
The \fIselect\fP statement is not implemented.
.LP
Variable arrays are not implemented.
.LP
Variable attributes other than integer are not implemented.
.LP
The ERR and EXIT traps are not implemented for functions.
.LP
Alias expansion is inhibited at the beginning of an alias definition
in the AT&T version.
.LP
Korn evaluates expressions differently.
.SH
See Also
.LP
sh(U),
test(U).
.\"Please report any bugs by mail to egisin@Waterloo.EDU or egisin@UWaterloo.CA.
.\" .I "UNIX Shell Programming,"
.\" Stephan G. Kochan, Patrick H. Wood,Hayden.
.\" .I "KornShell: Command and Programming Language (not yet published),"
.\" Morris Bolsky and David Korn.
