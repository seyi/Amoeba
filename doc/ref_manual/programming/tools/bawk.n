.\"	@(#)bawk.n	1.3	92/05/15 16:40:45
.aU
	Software: Bob Brodt
	Document: (probably) Bob Brodt
	Modified: Greg Sharp, 11 November 1990 - convert to Amoeba macros
.aE
.bp
.nH 1 "BAWK\|\(em\|Basic AWK"
.LP
.kW AWK
.kW BAWK
AWK is a programming language devised by Aho, Weinberger, and Kernighan
at Bell Labs (hence the name).
.I Bawk
is a basic subset of it written by Bob Brodt.
.I Bawk
programs search files for
specific patterns and performs ``actions'' for every occurrence
of these patterns.
The patterns can be ``regular expressions''
as used in the
.I ed
editor.
The actions are expressed using a subset of the C language.
.LP
The patterns and actions are usually placed in a ``rules'' file
whose name must be the first argument in the command line,
preceded by the flag
.B \(enf .
Otherwise, the first argument on the
command line is taken to be a string containing the rules
themselves.
All other arguments are taken to be the names of text
files on which the rules are to be applied, with
.B \(en
being the standard input.
To take rules from the standard input, use
.B "\(enf \(en" .
.LP
The command:
.sC
bawk rules prog.\d\s+2*\s0\u
.eC
would read the patterns and actions rules from the file
.I rules
and apply them to all the arguments.
.LP
The general format of a rules file is:
.sC
<pattern> { <action> }
<pattern> { <action> }
...
.eC
There may be any number of these
.cW "<pattern> { <action> }"
sequences in the rules file.
.I Bawk
reads a line of input from the current input file and applies
every
.cW "<pattern> { <action> }"
in sequence to the line.
.LP
If the
.cW "<pattern>"
corresponding to any
.cW "{ <action> }"
is missing,
the action is applied to every line of input.
The default
.cW "{ <action> }"
is to print the matched input line.
.nH 2 "Patterns"
.LP
A
.cW <pattern>
may consist of any valid C expression.
If the
.cW <pattern>
consists of two expressions separated by a comma,
it is taken to be a range and the
.cW <action>
is performed on all lines of input that match the range.
A
.cW <pattern>
may contain ``regular expressions'' delimited by an @ symbol.
Regular expressions can be thought of as a generalized ``wildcard''
string matching mechanism, similar to that used by many
operating systems to specify file names.
Regular expressions may contain any of the following characters:
.LP
.TS
center;
l l .
x	An ordinary character.
\e	The backslash quotes any character.
^	T{
A circumflex at the beginning of an
expr matches the beginning of a line.
T}
$	A dollar-sign at the end of an expression matches the end of a line.
.	A period matches any single character except newline.
:x	A colon matches a class of characters described by the next character.
:a	``:a'' matches any alphabetic.
:d	``:d'' matches digits.
:n	``:n'' matches alphanumerics.
: 	T{
``: '' matches spaces, tabs, and other control
characters, such as newline.
T}
*	T{
An expression followed by an asterisk matches zero or
more occurrences of that expression:
``fo*'' matches ``f'', ``fo'',
``foo'', ``fooo'', etc.
T}
+	T{
An expression followed by a plus sign matches one or more
occurrences of that expression: ``fo+'' matches
``fo'', ``foo'', ``fooo'', etc.
T}
\(mi	T{
An expression followed by a minus sign optionally matches
the expression.
T}
[]	T{
A string enclosed in square brackets matches any single character
in that string, but no others.  If the first character in
the string is a circumflex, the expression matches any
character except newline and the characters in the string.
For example, ``[xyz]'' matches ``xx'' and
``zyx'', while ``[^xyz]'' matches ``abc''
but not ``axb''.  A range of characters may be specified
by two characters separated by ``\-''.
T}
.TE
.nH 2 "Actions"
.LP
Actions are expressed as a subset of the C language.
All variables are global and default to int's if not formally declared.
Only char's and int's and pointers and arrays of char and int are allowed.
.I Bawk
allows only decimal integer constants to be used\(emno hex (0xnn)
or octal (0nn).
String and character constants may contain all of the special C
escapes (\e\^n, \e\^r, etc.).
.LP
.I Bawk
supports the ``if'', ``else'',
``while'' and ``break'' flow of
control constructs, which behave exactly as in C.
.LP
Also supported are the following unary and binary operators,
listed in order from highest to lowest precedence:
.LP
.TS
center, tab(:);
lfB lfB lfB
l l l .
Operator:Type:Associativity
() []:unary:left to right
! ~ ++ \(en\(en \(en * &:unary:right to left
* / %:binary:left to right
+ \(en:binary:left to right
<< >>:binary:left to right
< <= > >=:binary:left to right
\&== !=:binary:left to right
&:binary:left to right
^:binary:left to right
|:binary:left to right
&&:binary:left to right
||:binary:left to right
\&=:binary:right to left
.TE
.LP
Comments are introduced by a '#' symbol and are terminated by
the first newline character.
The standard ``/*'' and ``*/''
comment delimiters are not supported and will result in a syntax error.
.nH 2 "Fields"
.LP
When
.I bawk
reads a line from the current input file, the
record is automatically separated into ``fields.''
A field is simply a string of consecutive characters delimited by either
the beginning or end of line, or a ``field separator'' character.
Initially, the field separators are the space and tab character.
The special unary operator '$' is used to reference one of the
fields in the current input record (line).
The fields are numbered sequentially starting at 1.
The expression ``$0'' references the entire input line.
.LP
Similarly, the ``record separator'' is used to determine the end
of an input ``line,'' initially the newline character.
The field and record separators may be changed programmatically by one of
the actions and will remain in effect until changed again.
.LP
Multiple (up to 10) field separators are allowed at a time, but
only one record separator.
In either case, they must be changed
by
.I strcpy ,
not by a simple equate as in the real AWK.
.LP
Fields behave exactly like strings; and can be used in the same
context as a character array.
These ``arrays'' can be considered to have been declared as:
.sC
char ($n)[ 128 ];
.eC
In other words, they are 128 bytes long.
Notice that the parentheses are necessary because the operators [] and $
associate from right to left; without them, the statement
would have parsed as:
.sC
char $(1[ 128 ]);
.eC
which is obviously ridiculous.
.LP
If the contents of one of these field arrays is altered, the
``$0'' field will reflect this change.
For example, this expression:
.sC
*$4 = 'A';
.eC
will change the first character of the fourth field to an upper-
case letter 'A'.
Then, when the following input line:
.sC
120 PRINT "Name         address        Zip"
.eC
is processed, it would be printed as:
.sC
120 PRINT "Name         Address        Zip"
.eC
.LP
Fields may also be modified with the
.I strcpy
function (see below).
For example, the expression:
.sC
strcpy( $4, "Addr." );
.eC
applied to the same line above would yield:
.sC
120 PRINT "Name         Addr.        Zip"
.eC
.nH 2 "Predefined Variables"
.LP
The following variables are pre-defined:
.ne 7
.TS
center;
l l .
FS	Field separator (see below).
RS	Record separator (see below also).
NF	Number of fields in current input record (line).
NR	Number of records processed thus far.
FILENAME	Name of current input file.
BEGIN	A special <pattern> that matches the beginning of input text.
END	A special <pattern> that matches the end of input text.
.TE
.I Bawk
also provides some useful built-in functions for string
manipulation and printing:
.ne 12
.TS
center;
l l .
print(arg)	Simple printing of strings only, terminated by '\en'.
printf(arg...)	Exactly the printf() function from C.
getline()	Reads the next record and returns 0 on end of file.
nextfile()	Closes the current input file and begins processing the next file
strlen(s)	Returns the length of its string argument.
strcpy(s,t)	Copies the string ``t'' to the string ``s''.
strcmp(s,t)	Compares the ``s'' to ``t'' and returns 0 if they match.
toupper(c)	Returns its character argument converted to upper-case.
tolower(c)	Returns its character argument converted to lower-case.
match(s,@re@)	T{
Compares the string ``s'' to the regular expression
``re'' and returns the number of matches found (zero if none).
T}
.TE
.nH 2 "Limitations"
.LP
The maximum input line is 128 characters.
The maximum action is 4K.
