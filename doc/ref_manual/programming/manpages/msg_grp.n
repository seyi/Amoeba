.\"	@(#)msg_grp.n	1.3	96/02/15 16:52:56
.\"
.\" Copyright 1996 Vrije Universiteit, The Netherlands.
.\" For full copyright and restrictions on use see the file COPYRIGHT in the
.\" top level of the Amoeba distribution.
.\"
.aU
	Software: Mark D. Wood, 1992
	Document: Mark D. Wood, Nov 1992
	Modified: Gregory J. Sharp, Feb 1996 - polished it a little
.aE
.mT "msg_grp" L "libamoeba.a"
message-based group management routines
.SH
Synopsis
.LP
.sC L
#include "rrpc/msg_rpc.h"

GROUP	*msg_grp_join(gname, options, num_domains,
		      grp_state_xfer_func, grp_state_rcv_func,
		      monitor_func, arg);
void	msg_grp_leave(gp);
message	*msg_grp_receive(gp);
int	msg_grp_send(gp, entry, msg);
void	msg_define_grp_entry(gp, entry, func, entry_name);
int	msg_grp_num_members(gp);
.eC
.SH
Description
.LP
These routines provide a message-oriented group communication
structure, built on top of the lower-level \*(Am group facilities
(see
.I grp (L)).
Besides being based upon typed messages, these group facilities differ
from their lower-level
.I grp (L)
counterparts in a number of key respects.
This group facility provides an atomic group create/join;
if multiple processes concurrently attempt to create a group, only one
instance of the group will be created.
The membership of a group is automatically maintained despite the failures
of individual members;
group members do not call a reset procedure to reform the group after
partial failures.
This facility also allows group messages to be received either via
asynchronous call-backs or through blocking reads.
.mH
Error codes
.LP
These routines do not return an error condition.
They block until they are able to return successfully.
.sH
.ne 13
msg_grp_join
.LP
.sC
GROUP *
msg_grp_join(gname, options, num_domains, grp_state_xfer_func,
	     grp_state_rcv_func, monitor_func, arg)
char *gname;
int options;
int num_domains;
message *(*grp_state_xfer_func[])(int);
int (*grp_state_rcv_func[])(int, message *);
void (*monitor_func)(GROUP *gp, void *dummy)
void *arg;
.eC
.kW "\fImsg_grp_join\fP"
.LP
To join a group, a process calls
.I msg_grp_join .
This routine atomically creates the group if it does not already
exist.
.I Msg_grp_join
takes as parameters the name of the group as a string, an integer
variable specifying any options, and parameters used for state
transfer.
The only options currently supported are
.cW MSG_GRP_MANUAL_RCV ,
and
.cW MSG_GRP_RESILIENT .
The chosen options are ANDed together.
The option
.cW MSG_GRP_RESILIENT
indicates that the group is to be fully resilient to failures
(see
.I grp (L)).
The option
.cW MSG_GRP_MANUAL_RCV
will be described shortly.
All processes seeking to join a given group must call
.I msg_grp_join
with the same parameters.
.LP
When a process joins an existing group, the library is capable of
atomically transferring state from the existing members of the group to
the new member.
This automatic state transfer feature is useful when constructing
fault-tolerant applications using active replication, also known as the
.I state-machine
approach.
If all processes belonging to the group are identical and
deterministic, then all replicas will have the same state at the time
the join is processed.
(This follows from the deterministic nature of
the processes, the fact that the group join event is totally ordered
with respect to all other group communication, and the fact that
\*(Am threads are scheduled non-preemptively by default.)
The library causes the state from the existing members to be transferred
to the new member.
.LP
To carry out a state transfer, the state is divided into a number of
domains.
The parameter
.I num_domains
specifies the number of domains to be used.
The user-specified routine
.I grp_state_xfer_func
is called once for each domain, with the domain number being passed as the
parameter.
This routine is expected to return a message pointer.
The
.I grp_state_rcv_func
is called in the new member once for each domain, with two parameters:
the domain number and a pointer to the message which was generated by
calling
.I grp_state_xfer_func
in one of the existing group members with that domain number as the
parameter.
If no state transfer is required when joining a group,
then
.I num_domains
should be specified as zero.
In that case,
the parameters
.I grp_state_xfer_func
and
.I grp_state_rcv_func
should be specified as null-parameters.
.LP
The
.I msg_grp_join
routine also allows a call-back routine to be specified, to be called
whenever the membership of the group changes.
The specified call-back routine will be called with two parameters:
the group pointer and the value given as the
.I arg
parameter to the
.I msg_grp_join
call.
If a call-back routine is specified, it will be called for the
first time before the
.I msg_grp_join
routine returns.
.LP
The
.I msg_grp_join
routine returns a pointer to a group structure;
this handle is used subsequently to identify the group.
.sH
msg_grp_leave
.LP
.sC
void
msg_grp_leave(gp)
GROUP *gp;
.eC
.kW "\fImsg_grp_leave\fP"
.LP
A process may explicitly depart from a group by calling
.I msg_grp_leave .
The failure of a process automatically causes the group to be reformed
without the failed member.
Unlike the lower level \*(Am group
routines (see
.I grp (L)),
processes using these group routines do not reform the group upon
member failures or departures.
The group routines described here automatically maintain the membership of
the group.
.LP
Note that a group join is totally ordered with respect to other group
communication.
Moreover, just as each message sent is processed sequentially, a group join
is not processed until each message ordered before the join has been accepted
by the program (either by calling
.I msg_grp_send
or by returning from the appropriate call-back routine).
It is not possible that the state transfer routines will be called while the
program is in the middle of executing the message receive call-back
routine.
.sH
msg_grp_send
.LP
.sC
void
msg_send(gp, entry, msg)
GROUP *gp;
int entry;
message *msg;
.eC
.kW "\fImsg_grp_send\fP"
.LP
A message is broadcast to the group by invoking
.I msg_grp_send ,
passing as parameters the group pointer, an entry number, and a
pointer to the message to be sent to the group.
How messages are handled upon receipt depends on whether or not the option
.cW MSG_GRP_MANUAL_RCV
was specified.
.LP
If
.cW MSG_GRP_MANUAL_RCV
is not specified, then a separate thread is created which listens
for messages.
When a message is received which was sent to a specified entry point,
then the user-defined call-back routine for that entry point is invoked,
with a pointer to the newly received message as the parameter.
The message is deleted by the library after the call-back routine returns;
if the message is to persist, then the call-back routine should call
.I msg_increfcount
(see
.I msg (L)).
.sH
.ne 9
msg_define_grp_entry
.LP
.sC
void
msg_define_grp_entry(gp, entry, func, entry_name)
GROUP *gp;
int entry;
void (*func)(message *);
char *entry_name;
.eC
.kW "\fImsg_define_grp_entry\fP"
.LP
Call-back routines for accepting group messages are defined by calling
.I msg_define_grp_entry ,
passing as parameters the group pointer, the entry number to be
defined, the address of the function to be called when a message is
received, and a string denoting the name of the function.
Entry numbers are small integers in the range of 0 to
.cW MAX_MSG_ENTRIES \(mi1.
If a message is received for an entry point for which no call-back
function has been defined, then the message is simply discarded.
.sH
msg_grp_receive
.LP
.sC
message *
msg_grp_receive(gp)
GROUP *gp;
.eC
.kW "\fImsg_grp_receive\fP"
.LP
Messages may be manually received, by specifying the option
.cW MSG_GRP_MANUAL_RCV
when joining the group.
In this case, no thread is created to listen for messages.
Instead, messages are accepted by calling the function
.I msg_grp_receive ,
passing as a parameter the group pointer.
This routine blocks until a a message is received.
It then returns a pointer to the message.
.sH
msg_grp_num_members
.LP
.sC
int
msg_grp_num_members(gp)
GROUP *gp;
.eC
.kW "\fImsg_grp_num_members\fP"
.LP
The current number of members in a group may be determined by calling
.I msg_grp_num_members
with the address of the group structure as a parameter.
.SH
Warning
.LP
If all members of a group fail, and new processes then immediately join an
identically-named group, then the underlying \*(Am group structure
gets confused, resulting in incorrect behavior.
This problem can only be avoided by waiting a few seconds for \*(Am to
clean up the kernel group information before recreating the group.
.SH
Examples
.LP
There are examples showing how these routines are used in the sources.
They are in the directory
.I src/test/lib/amoeba .
.SH
See Also
.LP
grp(L),
msg(L),
msg_rpc(L).
