.\"	@(#)env.n	1.5	96/02/16 13:28:42
.\"
.\" Copyright 1996 Vrije Universiteit, The Netherlands.
.\" For full copyright and restrictions on use see the file COPYRIGHT in the
.\" top level of the Amoeba distribution.
.\"
.aU
	Software: Michael Condict, July 1990
	Document: Gregory Sharp, July 1990
	Modified: Gregory J. Sharp, Feb 1996
.aE
.mT "environment" L "libamoeba.a, libamunix.a"
lookup, delete and modify string environment variables
.SH
Synopsis
.LP
.sC L
void env_delete(env, name)
char *env_lookup(env, name)
char **env_put(env, env_alloc, newmap, override)
.eC
.SH
Description
.LP
.kW "\fIenv_delete\fP"
.kW "\fIenv_lookup\fP"
.kW "\fIenv_put\fP"
This module is used for manipulating string environments.
A string environment is just a mapping from character
string names to character string values.
Each process has a standard string environment,
pointed to by the global
.I environ
variable.
.LP
These routines take the environment pointer as a parameter so that they can
operate on any environment, not just the standard environment.
The environment pointer should point to a NULL-terminated array of pointers
to NULL-terminated character strings.
Each string should have the form ``name=value'' (where ``name'' does not
contain ``=''), specifying that ``name'' maps to ``value''.
No two strings in the same environment should use the same name.
(These routines will not add a duplicate name but it is possible to build
such an environment by hand.)
.sH
env_delete
.LP
.sC
void
env_delete(env, name)
char **env;
char *name;
.eC
.kW "\fIenv_delete\fP"
This function deletes the all environment variables with name
.I name
from the environment pointed to by
.I env .
If
.I name
is not in the environment then the environment will be unchanged.
.sH
env_lookup
.LP
.sC
char *
env_lookup(env, name)
char **env;
char *name;
.eC
.kW "\fIenv_lookup\fP"
This routine looks up the environment variable with name
.I name
in the environment
.I env
and returns a pointer to the
.I value
associated with that name.
(I.e., the part after the ``='' in the environment string.)
It returns the NULL-pointer if
.I name
was not found in the environment.
.sH
env_put
.LP
.sC
char **
env_put(env, env_alloc, newmap, override)
char **       env;
unsigned int *env_alloc;
char *        newmap;
int           override;
.eC
.kW "\fIenv_put\fP"
This routine adds the ``name=value'' environment entry pointed to by
.I newmap
to the environment
.I env
if it does not already exist.
If the specified ``name'' already exists it will only be replaced if
.I override
is non-zero.
On entry,
.I env_alloc
should point to an integer containing the number of elements allocated
(though not necessarily in use) in the environment.
If the
.I env
array is not malloced the value should be zero.
On return it contains the new number of elements allocated.
.LP
Since the environment may need to grow,
it may use
.I malloc
or
.I realloc
to obtain a larger piece of memory.
.LP
On success (which includes refusing to replace an existing name),
.I env_put
returns a pointer to the new environment.
On failure, such as a defective environment or
.I malloc
failure,
it returns NULL.
.SH
See Also
.LP
exec_file(L),
getcap(L).
