.\"	@(#)direct.n	1.6	96/02/15 16:48:31
.\"
.\" Copyright 1996 Vrije Universiteit, The Netherlands.
.\" For full copyright and restrictions on use see the file COPYRIGHT in the
.\" top level of the Amoeba distribution.
.\"
.aU
	Software: Robbert van Renesse, Hans van Staveren, Michael Condict
	Document: Michael N. Condict, March 1990
	Modified: Gregory J. Sharp, Nov 1996
.aE
.mT "direct" L "libamoeba.a, libamunix.a"
capability-based functions for searching in and modifying directories
.SH
Synopsis
.LP
.sC L
#include "module/direct.h"

errstat dir_append(origin, name, object)
char *dir_breakpath(origin, name, dir)
errstat dir_create(origin, name)
errstat dir_delete(origin, name)
errstat dir_lookup(origin, name, object)
capability *dir_origin(name)
errstat dir_replace(origin, name, object)
int dir_root(origin)

struct dir_open *dir_open(dir)
char *dir_next(dp)
errstat dir_close(dp)
errstat dir_rewind(dp)
.eC
.SH
Description
.LP
.kW "direct.h"
.kW "directory functions"
.kW "capability"
.kW "object naming"
.kW "\fIdir_append\fP"
.kW "\fIdir_breakpath\fP"
.kW "\fIdir_create\fP"
.kW "\fIdir_delete\fP"
.kW "\fIdir_lookup\fP"
.kW "\fIdir_origin\fP"
.kW "\fIdir_replace\fP"
.kW "\fIdir_root\fP"
.kW "\fIdir_open\fP"
.kW "\fIdir_next\fP"
.kW "\fIdir_close\fP"
.kW "\fIdir_rewind\fP"
This module provides a portable interface to directory servers.
It has the advantage of being independent of the particular directory server in
use, but it does not make available all the functionality of every
directory server, e.g., the \*(Ss.
It is similar to the module containing the
same set of functions but with the prefix ``name_'' instead of ``dir_''.
The main difference is that these functions take an extra argument,
.I origin ,
which is the capability for a directory relative to which the given
.I name
is to be interpreted (see below).
.LP
In each function, the
.I name
should be a ``path name'' that specifies a
directory or directory entry.
To these functions, a directory is simply
a finite mapping from character-string names to capabilities.
Each (name, capability) pair in the mapping is a ``directory entry''.
The capability
can be for any object, including another directory; this allows arbitrary
directory graphs (the graphs are not required to be trees).
A capability can be entered
in multiple directories or several times (under different names) in the
same directory, resulting in multiple links to the same object.
Note that some directory servers may have more complex notions of a directory,
but all that is necessary in order to access them from this module is that
they satisfy the above rules.
.LP
A path name is a string of printable characters.
It consists of a sequence of 0 or more ``components'', separated by ``/''
characters.
Each component is a string of printable characters not containing ``/''.
As a special case, the path name may begin with a  ``/'', in which case the
first component starts with the next character of the path name.
Examples: ``a/silly/path'', ``/profile/group/cosmo-33''.
.LP
If the path name begins with a ``/'', it is an ``absolute'' path name,
otherwise it is a ``relative'' path name.
The interpretation of relative path names is
relative to the directory specified by the
.I origin
capability.
.LP
In detail, the interpretation of a path name relative to a directory
.I d
is as follows:
.IP (1) 5
If the path has no components (is a zero-length string), it specifies the
directory
.I d ;
.IP (2) 5
Otherwise, the first
component in the path name specifies the name of an entry in directory
.I d
(either an existing name, or one that is to be added to the mapping);
.IP (3) 5
If there are any subsequent components in the path name, the first
component must map to the capability of a directory, in which case
the rest of the components are recursively interpreted as a path name
relative to that directory.
.LP
The interpretation of absolute path names is the same, except that the
portion of the path name after the ``/'' is interpreted
relative to the user's ``root'' directory, rather than to the current
working directory of the process.  (Each user is given a capability for a
single directory from which all other directories and objects are reached.
This is called the user's root directory.)
.LP
The components ``.'' and ``.\|.'' have special meaning.
Paths containing occurrences of
these components are syntactically evaluated to a normal form not containing
any such occurrences before any directory operations take place.
See
.I path_norm (L)
for the meaning of these special components.
.mH
Errors
.LP
Most functions return the error status of the operation.
Most of them perform transactions, so in addition to the errors
described below, they may return any of the standard RPC error codes.
.IP "\*<STD_OK\*>:" 16
the operation succeeded.
.IP "\*<STD_CAPBAD\*>:"
an invalid capability was used.
.IP "\*<STD_DENIED\*>:"
one of the capabilities encountered while parsing
the path name had insufficient access rights (for example, the
directory in which the capability is to be installed is unwritable).
.IP "\*<STD_NOTFOUND\*>:"
one of the components encountered while parsing the path name does not
exist in the directory specified by the preceding components
(the last component need not exist for some of the functions, but the other
components must refer to existing directory entries).
.mH
Functions
.sH
dir_append
.LP
.sC
errstat
dir_append(origin, name, object)
capability *origin;
char *name;
capability *object;
.eC
.kW "\fIdir_append\fP"
.I Dir_append
.ft R
adds the
.I object
capability to a directory server under
.I name
(interpreted relative
to
.I origin ).
It can subsequently be retrieved by giving the same
.I origin
and
.I name
to
.I dir_lookup .
The path up to, but not including, the last
component of
.I name
must refer to an existing directory.
This directory is modified by adding an entry consisting of the last
component of
.I name
and the
.I object
capability.
There must be no existing entry with the same name.
.rR
\*<SP_MODRGT\*> in the directory that is to be modified
.eR
\*<STD_EXISTS\*>:	\fIname\fR already exists
.DE
.sH
dir_breakpath
.LP
.sC
char *
dir_breakpath(origin, name, dir)
capability *origin;
char *name;
capability *dir;
.eC
.kW "\fIdir_breakpath\fP"
.LP
.I Dir_breakpath
stores in
.I dir
the capability for the directory allegedly containing the
object specified by
.I name
(interpreted relative to
.I origin ).
It returns the simple name of the entry under which the object is
stored, or would be stored if it existed.  It is intended for locating the
directory that must be modified to install an object in a directory
server under the given
.I name .
In detail,
.I dir_breakpath
does the following:
.LP
If the
.I name
is a path name containing only one component,
.I dir_breakpath
stores the capability for either the
.I origin
(if the path name
is relative) or the user's root directory (if the path name is absolute)
in
.I dir ,
and returns the
.I name
(without any leading ``/'').
.LP
Otherwise,
the
.I name
is parsed into two path names,
the first consisting of
all but the last component and the second a relative path name consisting of
just the last component.
.I Dir_breakpath
stores the capability for the directory specified by the first in
.I dir
and returns the second.
The first path name must refer to an existing directory.
.sH
dir_close
.LP
.sC
errstat
dir_close(dp)
struct dir_open *dp;
.eC
.kW "\fIdir_close\fP"
.I Dir_close
is called after reading a directory with
.I dir_open
and
.I dir_next .
It frees up the storage associated with the open directory specified by
.I dp ,
which must be a value returned by a previous call to
.I dir_open .
The directory is now ``closed'' and any subsequent attempt to use
.I dp
will produce undefined behavior.
.sH
dir_create
.LP
.sC
errstat
dir_create(origin, name)
capability *origin;
char *name;
.eC
.kW "\fIdir_create\fP"
.I Dir_create
creates a directory and stores its capability in a directory server
under
.I name
(interpreted relative to
.I origin ).
If
.I name
is a relative path name,
the new directory is created using the server containing the
.I origin
directory,
otherwise the new directory is created using the server containing
the user's root directory.
(Note that either of these might be different from the server that contains
the directory which is to be modified by adding the new directory.)
.LP
The path up to, but not including the last component of
.I name
must refer to an existing directory.
This directory is modified by adding an entry consisting of a new directory,
named by the last component of
.I name .
There must be no existing entry with the same name.
.rR
\*<SP_MODRGT\*> in the directory that is to be modified
.eR
\*<STD_EXISTS\*>:	\fIname\fR already exists in the directory server
.DE
.sH
dir_delete
.LP
.sC
errstat
dir_delete(origin, name)
capability *origin;
char *name;
.eC
.kW "\fIdir_delete\fP"
.I Dir_delete
deletes the entry specified by
.I name
(interpreted relative to
.I origin )
from a directory server.
The object specified by the capability associated with
.I name
in the directory entry is not affected.
If desired,
it should be separately destroyed (see
.I std_destroy (L)).
.rR
\*<SP_MODRGT\*> in the directory that is to be modified
.DE
.sH
dir_lookup
.LP
.sC
errstat
dir_lookup(origin, name, object)
capability *origin;
char *name;
capability *object;
.eC
.kW "\fIdir_lookup\fP"
.I Dir_lookup
finds the capability named by
.I name
(interpreted relative to
.I origin )
and stores it in
.I object .
.sH
dir_next
.LP
.sC
char *
dir_next(dp)
struct dir_open *dp;
.eC
.kW "\fIdir_next\fP"
.I Dir_next
returns the next name from the open directory specified by
.I dp ,
which must be a value returned by a call to
.I dir_open .
At the end of the directory, 0 is returned.
The return value points to static data and is overwritten by each call.
The user is responsible for ensuring that multiple threads do not
simultaneously read from the same open directory.
.sH
dir_open
.LP
.sC
struct dir_open *
dir_open(dir)
capability *dir;
.eC
.kW "\fIdir_open\fP"
.I Dir_open
is called to ``open'' the directory specified by
.I dir ,
in preparation for listing it.
It returns a pointer to a temporary data structure that keeps track of
a current position in the open directory.
The names entered in the directory can subsequently be retrieved by calling
.I dir_next
with the value returned by
.I dir_open.
After listing the directory it should be closed with
.I dir_close .
Multiple directories can be open at the same time.
.sH
dir_origin
.LP
.sC
capability *
dir_origin(name)
char *name
.eC
.kW "\fIdir_origin\fP"
If
.I name
is an absolute path name,
.I dir_origin
returns the capability for the user's root directory.
Otherwise it returns the capability for the current working directory
which it obtains from the capability environment.
This function is used to obtain an initial value for the
.I origin
parameter for the other functions in this module.
.sH
dir_replace
.LP
.sC
errstat
dir_replace(origin, name, object)
capability *origin;
char *name;
capability *object;
.eC
.kW "\fIdir_replace\fP"
.I Dir_replace
replaces the current capability stored under
.I name
(interpreted relative
to
.I origin )
with the specified
.I object
capability.
The
.I name
must refer to an existing directory entry.
This directory entry
is changed to refer to the specified
.I object
capability as an atomic action.
The entry is not first deleted then appended.
.rR
\*<SP_MODRGT\*> in the directory that is to be modified
.DE
.sH
dir_rewind
.LP
.sC
errstat
dir_rewind(dp)
struct dir_open *dp;
.eC
.kW "\fIdir_rewind\fP"
This routine resets the open directory pointed to by
.I dp
to the first entry in the directory.
.sH
dir_root
.LP
.sC
errstat
dir_root(origin)
capability *origin;
.eC
.kW "\fIdir_root\fP"
.I Dir_root
stores the capability for the user's root directory in
.I origin .
It returns 0 on success,
-1 on failure.
.eR
\*<\(mi1\*>:	cannot find the \*<ROOT\*> capability in the environment
.DE
.SH
Examples
.sC L
.ta 4n 8n 12n 16n 20n 24n 28n 32n 36n
capability rootcap, modify_dir, object;
char *old_name = "/home/abc";
/* Change the name /home/abc to /home/xyz: */
if (dir_root(&rootcap) == 0) {
	char *entry_name =
		dir_breakpath(&rootcap, old_name, &modify_dir);
	if (entry_name &&
		dir_lookup(&modify_dir, entry_name, &object) == STD_OK &&
		dir_delete(&modify_dir, entry_name) == STD_OK) {
		if (dir_append(&modify_dir, "xyz", &object) == STD_OK) {
			fprintf(stderr, "Successful name change\en");
			return;
		}
	}
}
fprintf(stderr, "Error -- no name change\en");
.eC
.LP
Several more examples can be found in the source code for the name-based
directory functions (see
.I name (L)),
since they are implemented as little more than calls to this module.
.SH
See Also
.LP
name(L).
