.\"	@(#)sp_dir.n	1.6	96/02/15 16:56:13
.\"
.\" Copyright 1996 Vrije Universiteit, The Netherlands.
.\" For full copyright and restrictions on use see the file COPYRIGHT in the
.\" top level of the Amoeba distribution.
.\"
.aU
	Software: Robbert van Renesse
	Document: Gregory J. Sharp, May 1990
	Modified: Gregory J. Sharp, Feb 1996
.aE
.mT "sp_dir" L "libamoeba.a, libkernel.a, libamunix.a"
routines which implement the POSIX-like directory commands for the \*(Ss
.SH
Synopsis
.LP
.sC L
#include "sp_dir.h"

void sp_closedir(dd)
SP_DIR *sp_opendir(name)
struct sp_direct *sp_readdir(dd)
void sp_rewinddir(dd)
void sp_seekdir(dd, pos)
long sp_telldir(dd)
.eC
.SH
Description
.LP
.kW "SOAP"
.kW "directory server"
.kW "\fIsp_opendir\fP"
.kW "\fIsp_closedir\fP"
.kW "\fIsp_readdir\fP"
.kW "\fIsp_seekdir\fP"
.kW "\fIsp_telldir\fP"
.kW "\fIsp_rewinddir\fP"
This set of routines implement an interface to the \*(Ss which is similar
to that required by POSIX.
However the management of the
.I errno
variable is not done.
The POSIX versions of these functions are available in the \*(Am libraries.
.LP
.sH
sp_closedir
.LP
.sC
void
sp_closedir(dd)
SP_DIR *dd;
.eC
.kW "\fIsp_closedir\fP"
This routine closes the directory pointed to by
.I dd
and frees any associated resources.
.I Dd
must point to a directory opened by
.kW "\fIsp_opendir\fP"
.I sp_opendir .
.sH
sp_opendir
.LP
.sC
SP_DIR *
sp_opendir(name)
char *name;
.eC
.kW "\fIsp_opendir\fP"
This routine opens the directory whose path name is
.I name ,
allocates storage,
fills it with the details of the directory and returns a pointer to
the allocated data.
This pointer must be used in subsequent operations on the directory.
If the
.I name
does not exist, is not a directory, or if memory allocation fails or
reading the directory fails, the routine returns the NULL-pointer.
.sH
sp_readdir
.LP
.sC
struct sp_direct *
sp_readdir(dd)
SP_DIR *dd;
.eC
.kW "\fIsp_readdir\fP"
This routine returns a pointer to the next directory entry in the directory
pointed to by
.I dd .
If there are no more entries in the directory it returns the NULL-pointer.
The structure of the directory entry is defined in
.I sp_dir.h .
.sH
sp_rewinddir
.LP
.sC
void
sp_rewinddir(dd)
SP_DIR *dd;
.eC
.kW "\fIsp_rewinddir\fP"
This routine moves the current position within the directory specified by
.I dd
to the beginning.
A subsequent read will return the first entry in the directory.
.sH
sp_seekdir
.LP
.sC
void
sp_seekdir(dd, pos)
SP_DIR *dd;
long pos;
.eC
.kW "\fIsp_seekdir\fP"
This routine moves the current position within the directory specified by
.I dd
to the entry number
.I pos .
A subsequent read will return the entry at position
.I pos .
.sH
sp_telldir
.LP
.sC
long
sp_telldir(dd)
SP_DIR *dd;
.eC
.kW "\fIsp_telldir\fP"
This routine returns the current position in the directory specified by
.I dd .
.SH
See Also
.LP
posix(L),
soap(L).
