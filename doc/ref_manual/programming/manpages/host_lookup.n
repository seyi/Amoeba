.\"	@(#)host_lookup.n	1.7	96/02/16 13:28:47
.\"
.\" Copyright 1996 Vrije Universiteit, The Netherlands.
.\" For full copyright and restrictions on use see the file COPYRIGHT in the
.\" top level of the Amoeba distribution.
.\"
.aU
	Software: Gregory J. Sharp
	Document: Gregory J. Sharp, 15 November 1990
	Modified: Gregory J. Sharp, 10 November 1993
		    - added kernel security support and super_host_lookup
		  Gregory J. Sharp, Sept 1995
		    - added ip_host_lookup
		  Gregory J. Sharp, Feb 1996
.aE
.mT host_lookup L "libamoeba.a, libkernel.a, libamunix.a"
look up the capability for a host
.SH
Synopsis
.LP
.sC L
#include "module/host.h"

errstat host_lookup(hostname, cap)
errstat ip_host_lookup(hostname, extension, cap)
errstat super_host_lookup(hostname, cap)
.eC
.SH
Description
.LP
.kW "\fIhost_lookup\fP"
.kW "\fIip_host_lookup\fP"
.kW "\fIsuper_host_lookup\fP"
.kW "host name"
These routines search for the capability of the host
specified by the string
.I hostname .
They look in various places as described below.
If the lookup is successful they return
.cW STD_OK
and the capability for the host is in
.I *cap .
Otherwise they return the error status and
.I *cap
is not set.
.sH
super_host_lookup
.LP
.sC
errstat
super_host_lookup(hostname, cap)
char *hostname;
capability *cap;
.eC
.kW "\fIsuper_host_lookup\fP"
If
.I hostname
begins with a / or .\|/ then it is assumed to be an absolute path name and
.I super_host_lookup
looks it up directly.
Otherwise it assumes that it is a relative path name.
It begins by looking for it in the directory
.cW HOST_SUPER_DIR
as defined in the file
.I ampolicy.h
(typically
.I /super/hosts ).
.LP
It returns the error status of the attempt to look up the name.
.LP
Under
.UX
it performs one extra search before it looks in
.cW HOST_SUPER_DIR .
It will attempt to look up the capability in a
.UX
file with the name specified, relative to the directory
.cW UNIX_HOST_DIR
as defined in the file
.I amupolicy.h
(typically
.cW UNIX_HOST_DIR
is `.').
This is useful when porting \*(Am since it allows bootstrapping an \*(Am system
from
.UX
before an \*(Am directory server is available.
.sH
host_lookup
.LP
.sC
errstat
host_lookup(hostname, cap)
char *hostname;
capability *cap;
.eC
.kW "\fIhost_lookup\fP"
.LP
.I Host_lookup
begins by calling
.I super_host_lookup .
If that succeeds it returns the value of
.I super_host_lookup .
Otherwise it looks in the directory
.cW HOST_DIR
as defined in the file
.I ampolicy.h
(typically
.I /profile/hosts ).
For most users this last lookup is the one that will succeed.
If this fails then it attempts to look up the host in the current directory.
.LP
The error status is either that of the last
.I name_lookup() attempted
(see
.I name (L))
or
.cW STD_NOMEM
if the
.I hostname
string is too long for internal buffering.
.sH
ip_host_lookup
.LP
.sC
errstat
ip_host_lookup(hostname, extension, cap)
char *hostname;
char *extension;
capability *cap;
.eC
.kW "\fIip_host_lookup\fP"
.LP
This function is used to look up one of the capabilities of an IP server
(see
.I ipsvr (A)).
It uses
.I host_lookup
to find the capability for the specified host, which should be a host
running an IP server.
It then uses the extension to select the desired element of the server.
The
.I extension
is a string which is either
.I ip ,
.I eth ,
.I tcp
or
.I udp .
Any other values will fail.
.LP
The function returns
.cW STD_OK
on success.
Otherwise it returns one of the standard error codes indicating the cause
of failure.
.SH
Examples
.LP
The following code looks up the capability of the machine called
.cW ihnp4 .
.sC L
char * hostname = "ihnp4"
capability hcap;
errstat err;
.sp 0.5v
if ((err = host_lookup(hostname, &hcap)) == STD_OK)
    /* use the capability for something */;
else
    printf("lookup of %s failed: %s\en", hostname, err_why(err));
.eC
.LP
To look up the
.I tcp
capability of the IP server running on the host
.I armada1E
use:
.sC L
char * hostname = "armada1E";
capability tcpcap;
errstat err;
.sp 0.5v
if ((err = ip_host_lookup(hostname, "tcp", &tcpcap)) == STD_OK)
    /* use the capability for something */;
else
    printf("ip lookup of %s.%s failed: %s\en",
		hostname, "tcp", err_why(err));
.eC
.SH
See Also
.LP
name(L).
