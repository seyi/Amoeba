.\"	@(#)newproc.n	1.6	96/02/15 16:53:23
.\"
.\" Copyright 1994 Vrije Universiteit and Stichting Mathematisch Centrum,
.\" The Netherlands.
.\" For full copyright and restrictions on use see the file COPYRIGHT in the
.\" top level of the Amoeba distribution.
.\"
.aU
	Software: Guido van Rossum, 1989
	Document: Guido van Rossum, March 1990
.aE
.mT "newproc" L "libamoeba.a"
create a child process without forking
.SH
Synopsis
.LP
.sC L
int newproc(file, argv, envp, nfd, fdlist, sigignore)
int newprocp(file, argv, envp, nfd, fdlist, sigignore)
char *file;
char *argv[];
char *envp[];
int   nfd;
int   fdlist[];
long  sigignore;
.eC
.SH
Description
.LP
.kW "\fInewproc\fP"
.kW "\fInewprocp\fP"
.kW "child process"
.kW "program arguments"
.kW "string environment"
.kW "signals"
.kW "file descriptors"
.kW "fork"
.kW "process execution"
.kW "PATH environment variable"
These functions are extensions of the process creation primitives
.I fork
and
.I exec
provided by
.I posix (L);
they are much faster but less general, and
intended to optimize the common cases.
.LP
.I Newproc
is intended to replace the common case of a
.I fork
call followed (in the child) by some I/O redirection, signal fiddling,
and an
.I exec
call.
.I Newprocp
does almost the same, but searches its file argument in the environment
variable
.cW PATH
using the same algorithm as the shell.
.LP
The arguments are:
.IP "file, argv, envp" \w'file,\0argv,\0envp\0'u
The first three arguments correspond to the arguments to execve.
.IP "nfd, fdlist"
These arguments specify I/O redirection.
If nfd is negative, the child will inherit all open files from the
parent except those with the close-on-exec flag on.
Otherwise, for 0 <= i < nfd, file descriptor i in the child will be
dupped from file descriptor fdlist[i] in the parent, if that refers to a
valid file descriptor whose close-on-exec flag is off, and closed
otherwise; file descriptors nfd and higher in the child are closed.
.IP "sigignore"
The last argument is a signal mask: signals corresponding to one bits
in the mask will initially be ignored by the child, while the default
action will be used for the others.
Remember that signal i corresponds to bit i-1, as defined by the
.I sigmask()
macro in
.I signal.h .
.mH
Return Value
.LP
The return value is the process ID of the new process.
This is a child of the calling process, indistinguishable from one
created by
.I fork
and
.I exec .
.mH
Diagnostics
.LP
If no process was started, errno is set to indicate the error and \(mi1 is
returned.
.mH
Environment Variables
.LP
.IP \*<PATH\*> 8
Used by
.I newprocp
to search the file.
If this is not set, a system-dependent default path is used (typically
.I ":/bin:/usr/bin" ).
.SH
Example
.LP
The following program starts the program given by its first argument,
passing the remaining arguments on, and waits for the process to finish.
Environment, file descriptors and signals are left unchanged.
.sC
#include "stdio.h"

main(argc, argv)
int argc;
char **argv;
{
    int pid, sts;
    if (argc < 2)
        exit(2); /* Bad usage */
    pid = newprocp(argv[1], argv+1, (char **)0,
                   -1, (int *)0, -1L);
    if (pid < 0) {
        perror(argv[1]);
        exit(1);
    }
    printf("Child pid: %d\en", pid);
    if (waitpid(pid, &sts, 0) < 0) {
        perror("waitpid");
        exit(1);
    }
    printf("Child status: %d\en", sts);
    exit(0);
}
.eC
.SH
See Also
.LP
exec_file(L),
posix(L).
